package kr.or.ddit.ddtown.controller.emp.edms;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.emp.edms.IEdmsService;
import kr.or.ddit.ddtown.service.file.IFileService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.edms.EdmsFormVO;
import kr.or.ddit.vo.edms.EdmsVO;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.EmployeeVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/emp/edms")
public class EDMSFormController {

	@Autowired
	private IEdmsService edmsService;
	
	@Autowired
	private IFileService fileService;
	
	@GetMapping("/createform")
	public String EDMSFormCreate(Model model) {
		List<EdmsFormVO> formList = edmsService.getFormList();
		log.info("formList : {}",formList);
		model.addAttribute("formList", formList);
		return "emp/edms/formTemplate";
	}
	
	
	@PostMapping("/createform")
	public String EDMSFormUpdate(EdmsFormVO formVO) {
		log.info("formVO : {}",formVO);
		String path = "";
		ServiceResult result = edmsService.updateForm(formVO);
		if(ServiceResult.OK.equals(result)) {
			path = "redirect:/edms/form";
		}else {
			path = "redirect:/edms/createform";
		}
		return path;
	}
	
	@GetMapping("/approvalDraft")
	public String EDMSForm(Model model) {
		List<EdmsFormVO> formList = edmsService.getFormList();
		log.info("formList : {}",formList);
		model.addAttribute("formList", formList);
		return "emp/edms/approvalForm";
	}
	
	@PostMapping("/form")
	public String EdmsFormProcess(EdmsVO edmsVO) {
		log.info("edmsVO : {}", edmsVO);
		return "";
	}
	
	@GetMapping("/requestList")
	public String requestList() {
		return "emp/edms/requestList";
	}
			
	@GetMapping("/detail")
	public String requestDetail(int edmsNo, Model model) {
		EdmsVO edmsVO = edmsService.selectApproval(edmsNo);
		log.info("edmsVO : {}", edmsVO);
		model.addAttribute("edmsVO", edmsVO);
		return "emp/edms/approvalDetail";
	}
	
	@GetMapping("/approvalBox")
	public String approvalBox(
			@RequestParam(defaultValue = "1", required = true) int currentPage,
			@RequestParam(defaultValue = "all", required = false) String searchType,
			@RequestParam(required = false) String searchWord,
			Model model) {
		
		PaginationInfoVO<EdmsVO> pagingVO = new PaginationInfoVO<>();
		pagingVO.setCurrentPage(currentPage);
		
		if(StringUtils.isNotBlank(searchType)) {
			pagingVO.setSearchType(searchType);
		}
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
		}
		
		int totalRecord = edmsService.selectTotalRecord(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		// empVO 가져오기
		EmployeeVO empVO = getEmployeeVO();
		Map<String, Object> map = new HashMap<>();
		map.put("searchWord", searchWord);
		map.put("searchType", searchType);
		map.put("empUsername", empVO.getEmpUsername());
		map.put("startRow", pagingVO.getStartRow());
		map.put("endRow", pagingVO.getEndRow());
		List<EdmsVO> approvalList = edmsService.selectApprovalBoxList(map);
		
		pagingVO.setDataList(approvalList);
		log.info("approvalList : {}", approvalList);
		model.addAttribute("pagingVO", pagingVO);
		return "emp/edms/approvalBox";
	}
	
	@GetMapping("/update")
	public String edmsUpdateForm(int edmsNo, Model model) throws Exception {
		EdmsVO edmsVO = edmsService.selectApproval(edmsNo);
		int fileGroupNo = edmsVO.getFileGroupNo();
		if(fileGroupNo != 0) {
			List<AttachmentFileDetailVO> fileList = fileService.getFileDetailsByGroupNo(fileGroupNo);
			edmsVO.setFileList(fileList);
		}
		log.info("edmsVO : {}", edmsVO);
		model.addAttribute("edmsVO", edmsVO);
		return "emp/edms/approvalUpdateForm";
	}
	
	@PostMapping("/update")
	public ResponseEntity<Object> edmsUpdate(EdmsVO edmsVO) throws Exception{
		log.info("edmsVO : {} ", edmsVO);
		int fileGroupNo = edmsVO.getFileGroupNo();
		MultipartFile[] addFileList = edmsVO.getAddFileList();
		// 파일그룹번호가 있을시
		if(fileGroupNo != 0) {
			List<Integer> deleteList = edmsVO.getDeleteFileList();
			if(deleteList.size() > 0) {
				fileService.deleteSpecificFiles(deleteList);				
			}
		}
		// 파일 처리
		fileService.uploadAndProcessFiles(edmsVO.getAddFileList(), "FITC011");
		// edms 테이블 수정
		
		// 결재자 변경시 결재자 수정
		
		// 참조자 변경시 참조자 수정
		
		// 의미없는 데이터 반환
		return ResponseEntity.ok().build();
	}
	
	/**
	 * 현재 로그인 중인 직원의 EmployeeVO 가져오기
	 * @return EmployeeVO
	 */
	private EmployeeVO getEmployeeVO() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO empVO = null;
		if(principal != null && principal instanceof CustomUser) {
			empVO = ((CustomUser) principal).getEmployeeVO();
		}
		return empVO;
	}
}
