package kr.or.ddit.ddtown.controller.goods;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.ddtown.mapper.admin.goods.notice.IAdminGoodsNoticeMapper;
import kr.or.ddit.ddtown.service.admin.goods.notice.IAdminGoodsNoticeService;
import kr.or.ddit.ddtown.service.goods.notice.IGoodsNoticeService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.goods.goodsNoticeVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
@RequestMapping("/goods/notice")
public class goodsNoticeListController {
	
	@Autowired
	private IGoodsNoticeService noticeService;
	
	@Autowired
	private IAdminGoodsNoticeService adminnoticeService;
	
	@GetMapping("/list")
	// @PostMapping("/search") // 검색도 GET /list로 통합 (URL 파라미터로 처리)
	public String noticeList(
			@RequestParam(name="currentPage", required=false, defaultValue="1") int currentPage,
			@RequestParam(name="searchType", required=false, defaultValue="title") String searchType, 
			@RequestParam(name="searchWord", required=false) String searchWord,
			Model model) {

		log.info("### 공지사항 목록/검색 페이지 요청");
		
		PaginationInfoVO<goodsNoticeVO> pagingVO = new PaginationInfoVO<>();
		
		// 검색 조건 설정
		if (searchWord != null && !searchWord.trim().isEmpty()) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			log.info("검색 조건 적용: searchType={}, searchWord={}", searchType, searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage); // 현재 페이지 설정
		
		// 전체 게시글 수 조회
		int totalCount = noticeService.getTotalGoodsNoticeCount(pagingVO);
		pagingVO.setTotalRecord(totalCount); // 전체 게시글 수 설정 (PaginationInfoVO 내부에서 totalPage 계산)
		
		// 페이징 처리된 목록 조회
		List<goodsNoticeVO> noticeList = noticeService.getAllGoodsNotices(pagingVO);
		pagingVO.setDataList(noticeList); // 조회된 데이터 목록 설정
		
		model.addAttribute("pagingVO", pagingVO); // JSP로 PaginationInfoVO 객체 전달
		
		// 검색어와 검색 타입도 다시 모델에 담아줘서 검색 폼에 유지되도록 합니다.
		model.addAttribute("searchType", searchType);
		model.addAttribute("searchWord", searchWord);
		
		log.info("### 공지사항 목록 로드 완료. 총 {}개", totalCount);
		// JSP 파일 경로가 goods/noticeList.jsp 인지 goods/goods_notice.jsp 인지 확인
		return "goods/noticeList"; 
	}
	
    // **사용자 측 공지사항 상세 페이지**
    @GetMapping("/detail/{goodsNotiNo}") // PathVariable 사용으로 URL 구조를 깔끔하게
    public String noticeDetail(
            @PathVariable("goodsNotiNo") int goodsNotiNo, // URL에서 직접 공지번호를 받습니다.
            @RequestParam(name="currentPage", required=false, defaultValue="1") int currentPage,
            @RequestParam(name="searchType", required=false, defaultValue="title") String searchType, 
            @RequestParam(name="searchWord", required=false) String searchWord,
            Model model) {
        
        log.info("### GoodsNoticeController - noticeDetail 호출: goodsNotiNo={}", goodsNotiNo);
        
        // 사용자 측 서비스인 goodsNoticeService를 사용합니다.
        goodsNoticeVO notice = adminnoticeService.getGoodsNotice(goodsNotiNo);
        
        if (notice == null) {
            log.warn("goodsNotiNo={} 에 해당하는 공지사항을 찾을 수 없습니다. 목록 페이지로 리다이렉트.", goodsNotiNo);
            // 사용자에게는 보통 에러 메시지를 포함하여 목록으로 돌려보내는 경우가 많습니다.
            model.addAttribute("message", "존재하지 않는 공지사항입니다.");
            return "redirect:/goods/notice/list"; // 사용자 측 공지사항 목록 URL로 변경
        }
        
        // JSP에서 '목록' 버튼 클릭 시 현재 페이지 및 검색 조건을 유지하여 돌아가도록 파라미터 전달
        model.addAttribute("currentPage", currentPage);
        model.addAttribute("searchType", searchType);
        model.addAttribute("searchWord", searchWord);
        
        model.addAttribute("notice", notice);
        log.info("상세 페이지 데이터 로드 완료. 제목: {}", notice.getGoodsNotiTitle());
        return "goods/noticeDetail"; // 사용자 측 상세 JSP 경로
    }
	
}
