package kr.or.ddit.ddtown.controller.admin.goods;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletRequest;
import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.admin.goods.IAdminGoodsService;
import kr.or.ddit.ddtown.service.goods.main.IGoodsService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.goods.goodsOptionVO;
import kr.or.ddit.vo.goods.goodsStockVO;
import kr.or.ddit.vo.goods.goodsVO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RequestBody;



@Slf4j
@Controller
@RequestMapping("/admin/goods/items")
public class AdminGoodsItemsController {
	
	@Autowired
	private IGoodsService goodsservice;
	
	@Autowired
	private IAdminGoodsService admingoodsservice;
	
	//상품 목록 페이지
	@GetMapping("/list")
	public String goodsItemList(Model model,
			@RequestParam(name="currentPage", required = false, defaultValue = "1") int currentPage,
	        @RequestParam(required = false) String searchWord,
	        @RequestParam(name="searchType", required = false) String searchType // JSP의 정렬 select name과 일치
			) {
				
			    // 1. PaginationInfoVO 객체 생성 및 파라미터 설정
			    PaginationInfoVO<goodsVO> pagingVO = new PaginationInfoVO<>();
			    pagingVO.setCurrentPage(currentPage); // setCurrentPage를 호출해야 startRow, endRow 등이 계산됨
			    pagingVO.setSearchWord(searchWord);   // 검색어 설정
			    pagingVO.setSearchType(searchType);     // 정렬 타입 설정
		
			    // 2. 서비스 호출 (이제 서비스가 모든 것을 처리)
			    admingoodsservice.retrieveGoodsList(pagingVO);
			    
			    // 3. 모델에 PagingVO 객체 담기 (JSP에서 ${pagingVO}로 사용)
			    model.addAttribute("pagingVO", pagingVO);
				
				//7. 아티스트 그룹 목록 조회
				List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
				model.addAttribute("artistList", artistList);
				
				//1. 기본 상품 목록
				List<goodsVO> goodsList = goodsservice.goodsList();
				
				//2. 상태 정보가 포함된 목록
		        List<goodsVO> goodsStatus = goodsservice.getgoodsStatus();
		        model.addAttribute("goodsStatus", goodsStatus);
		        
		        //3. 모든 상품 재고 정보
		        List<goodsStockVO> stockList = goodsservice.getgoodsTotalStock();
		        
		        //4. 굿즈 상태 리스트(상태 정보가 포함된 목록)를 Map으로 변환
		        Map<Integer, goodsVO> statusMap = goodsStatus.stream()
		        		.collect(Collectors.toMap(
		        				goodsVO::getGoodsNo,
		        				Function.identity(),
		        				(existing, replacement) -> existing
		        				));
		        
		        //5.재고 정보를 빠르게 찾기 위해 stockList를 Map으로 변환
		        Map<Integer, Integer> stockQuantityMap = new HashMap<>();
		        if(stockList != null) {
		        		for(goodsStockVO stock: stockList) {
		        			stockQuantityMap.put(stock.getGoodsNo(), stock.getTotalStockQty());
		        		}
		        }
		        
		        //6.기본 상품 목록(goodsList)에 상태 정보와 재고 정보 채워넣기
		        for(goodsVO goods: goodsList) {
		        		goodsVO statusData = statusMap.get(goods.getGoodsNo());
		        		
		        		if(statusData != null) {
		        			goods.setStatusEngKey(statusData.getStatusEngKey());
		        			goods.setStatusKorName(statusData.getStatusKorName());
		        		} else {
		        			goods.setStatusEngKey("null");
		        			goods.setStatusKorName("상태 없음");
		        			log.info("상품번호 {} 에 대한 상태 정보를 statusInfoMap에서 찾을 수 없습니다.", goods.getGoodsNo());
		        		}
		        		
		        		Integer stockQty = stockQuantityMap.get(goods.getGoodsNo());
		        		goods.setStockRemainQty(stockQty != null ? stockQty: 0);
		        }
		        
		        model.addAttribute("goodsList", goodsList);

		        log.info("최종 상품 상태 값 로깅..");
		        if(goodsList != null && !goodsList.isEmpty()) {
		        		for(goodsVO goods:goodsList) {
		        			log.info("상품번호: {}, 상품명: {}, 상태(Eng): {}, 상태(Kor): {}, 현재고: {}",
		                            goods.getGoodsNo(),
		                            goods.getGoodsNm(),
		                            goods.getStatusEngKey(),
		                            goods.getStatusKorName(),
		                            goods.getStockRemainQty());
		                
		        		}
		        } else {
		        		log.info("조회된 최종 상품 목록이 없습니다.");
		        }
		        
		        log.info("--- 최종 상품 상태 값 로깅 끝 ---");
		        // --- 로거 사용 부분 끝 ---
		        
				return "admin/goods/items/itemsList";
	}
	
	//상품 상세 페이지
	@GetMapping("/detail")
	public String goodsItemDetail(@RequestParam("id") int goodsNo, //링크의 파라미터와 "id" 일치
			RedirectAttributes ra,
			Model model
			) throws Exception { 
		log.info("상품 상세 페이지 요청! goodsNo: {}", goodsNo);
		
		//1. goodsNo를 사용하여 상품 상세 정보 조회 (서비스 호출)
		goodsVO items = goodsservice.getGoodsDetail(goodsNo);
		
		if(items == null) {
			log.warn("goodsNo {}에 해당하는 상품 정보를 찾을 수 없습니다!", goodsNo);
			//에러 처리
			ra.addFlashAttribute("errorMessage", "상품 정보를 찾을 수 없습니다!");
			return "redirect:/admin/goods/items/list";
		}
		
		model.addAttribute("items", items); //jsp에서 ${item.~}으로 사용
		
		//2. 해당 상품의 옵션 목록 조회
		List<goodsOptionVO> optionList = goodsservice.optionList(goodsNo);
		model.addAttribute("optionList", optionList);
		
		return "admin/goods/items/itemsDetail";
	}
	
	//상품 등록 페이지 불러오기
	@GetMapping("/form")
	public String goodsItemFormPage(Model model) {
		log.info("상품 등록 폼 요청");
		
		//1.AdminGoodsService를 통해 아티스트 그룹 목록 조회
		List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
		
		log.info("컨트롤러 - artistList is null: {}", (artistList == null));
		
		if(artistList != null) {
			log.info("컨트롤러 - artistList size: {}", artistList.size());
			for (ArtistGroupVO artist : artistList) {
				log.info("컨트롤러 - Artist: No={}, Name={}", artist.getArtGroupNo(), artist.getArtGroupNm());
			}
		}
		
		model.addAttribute("artistList", artistList);
		
		goodsVO currentItem = new goodsVO();
		log.info("컨트롤러 - item.artGroupNo: {}", currentItem.getArtGroupNo());
		
		//2.새로운 빈 goodsVO 객체를 item이라는 이름으로 전달
		model.addAttribute("item", currentItem);
		
		return "admin/goods/items/itemsForm";
	}
	
	//상품 등록하기
	@PostMapping("/form")
	public String goodsItemForm(
			@ModelAttribute goodsVO goods, 
			RedirectAttributes ra,
			Model model,
			HttpServletRequest request
			) {
		 // ★★★ 이 로그가 핵심! ★★★
	    log.warn("<<<<< CONTROLLER POST /items/register 진입! Thread: {}, SessionId: {} >>>>>", 
	            Thread.currentThread().getName(), 
	            request.getSession().getId()); // 현재 요청의 세션 ID 로깅
		
		log.info("goodsItemRegister() 실행!!! goodsVO: {}", goods);
		log.info("옵션 개수: {}", goods.getOptions() != null ? goods.getOptions().size() : 0);
		
		String goPage = "";
		
		try { 
			ServiceResult result = admingoodsservice.itemsRegister(goods); //서비스 결과 받기
			
			if (ServiceResult.OK.equals(result)) { //명시적으로 성공 결과 확인
				ra.addAttribute("successMessage", "상품 등록이 성공했습니다!!");
				goPage = "redirect:/admin/goods/items/list";
			} else {
				log.warn("상품 등록 실패: {}", goods.getGoodsNo());
				
				model.addAttribute("errorMessage", "상품 등록에 실패했습니다!! 입력 내용을 확인하세요!!");
				model.addAttribute("item", goods);

				List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
				model.addAttribute("artistList", artistList);
				
				goPage = "admin/goods/items/itemsForm";
			}
			
		} catch (Exception e) { //서비스 실행 중 예외 발생
			log.error("상품 등록 중 시스템 오류 발생", e);
			
			model.addAttribute("errorMessage", "시스템 오류로 인해 상품 등록에 실패했습니다. (" + e.getMessage() +")");
			
			List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
			model.addAttribute("artistList", artistList);
			
			goPage = "admin/goods/items/itemsForm";
		} 
		
		return goPage;
	}
	
	//상품 수정 페이지 불러오기
	@GetMapping("/update")
	public String goodsItemUpdateFormPage(
			@RequestParam("id") int goodsNo, 
			Model model,
			RedirectAttributes ra
			) {
		log.info("상품 수정 폼 요청! goodsNo: {}", goodsNo);
		
		try {
			//1.goodsNo를 통해서 수정할 상품의 상세 정보 조회
			goodsVO modItems = goodsservice.getGoodsDetail(goodsNo);
			
			if(modItems == null) {
				log.warn("goodsNo {}에 해당하는 상품 정보를 찾을 수 없어 수정 폼을 표시할 수 없습니다!!", goodsNo);
				ra.addAttribute("errorMessage", "수정할 상품 정보를 찾을 수 없습니다!!");
				return "redirect:/admin/goods/items/list"; //목록으로 리다이렉트
			}
			
			model.addAttribute("item", modItems); //JSP에서 ${item.~}으로 사용
			
			//2.아티스트 그룹 목록(드롭다운 채우기 용)
			List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
			model.addAttribute("artistList", artistList);
			
			//3.해당 상품의 옵션 목록
			List<goodsOptionVO> optionList = goodsservice.optionList(goodsNo);
			model.addAttribute("optionList", optionList);
			
			return "admin/goods/items/itemsUpdate";
			
		} catch (Exception e) {
			log.error("상품 수정 폼 로딩 중 오류 발생! goodNo: {}", goodsNo, e);
			ra.addFlashAttribute("errorMessage", "상품 정보를 불러오는 중 오류가 발생했습니다!");
			return "redirect:/admin/goods/items/list";
		}
	}
	
	//상품 업데이트
	@PostMapping("/update")
	public String goodsItemUpdateForm (
			@ModelAttribute("item") goodsVO goods,
			BindingResult bindingResult,
			@RequestParam(name="deleteAttachDetailNos", required=false) String deleteAttachDetailNosCsv, //삭제할 이미지 ID
			@RequestParam(name="deleteOptionNos", required=false) String deleteOptionNosCsv, //삭제할 옵션 ID
			RedirectAttributes ra,
			Model model,
			HttpServletRequest request
			) {
		
		log.warn("<<<<<< Controller POST /items/update 진입! Thread: {}, SessionId: {}",
				Thread.currentThread().getName(),
				request.getSession().getId());
		
		log.info("goodsItemUpdateFrom 실행..!!! goodsVO: {}", goods);
		log.info("넘어온 옵션 개수: {}", goods.getOptions() != null ? goods.getOptions().size()	 :0);
		log.info("삭제할 이미지 ID 문자열: {}", deleteAttachDetailNosCsv);
		log.info("삭제할 옵션 ID 문자열: {}", deleteOptionNosCsv);
		
		String goPage = "";
		
		//1. 삭제할 이미지 ID 리스트를 goodVO에 설정
		List<Integer> imageIdsToDelete = new ArrayList<>();
		
		if(deleteAttachDetailNosCsv != null && !deleteAttachDetailNosCsv.isEmpty()) {
			String[] idsArray = deleteAttachDetailNosCsv.split(",");
			
			for(String idStr : idsArray) {
				if(!idStr.trim().isEmpty()) {
					try {
						imageIdsToDelete.add(Integer.parseInt(idStr.trim()));
					} catch (NumberFormatException e) {
						log.warn("유효하지 않은 삭제 파일 ID: {}", idStr);
					}
				}
			}
		}
		
		goods.setDeleteAttachDetailNos(imageIdsToDelete);
		
		//2. 삭제할 옵션 ID 리스트를 goodsVO에 설정
		List<Integer> optionIdsToDelete = new ArrayList<>();
		
		if(deleteOptionNosCsv != null && !deleteOptionNosCsv.isEmpty()) {
			String[] idsArray = deleteOptionNosCsv.split(",");
			
			for(String idStr : idsArray) {
				if (!idStr.trim().isEmpty()) {
					try {
						optionIdsToDelete.add(Integer.parseInt(idStr.trim()));
					} catch (NumberFormatException e) {
						log.warn("유효하지 않은 삭제 옵션 ID: {}", idStr);
					}
				}
			}
		}
		
		goods.setDeleteOptionNos(optionIdsToDelete);
		
		//3. 기본 유효성 검사 (예: 상품명 필수!)
		if(bindingResult.hasErrors()) {
			log.warn("상품 수정 유효성 검사 오류 발생! 오류 개수: {}", bindingResult.getErrorCount());
			
			//폼을 다시 보여주기 위해 필요한 데이터 모델에 추가!!
			model.addAttribute("errorMessage", "입력값에 오류가 있습니다!!");
			
			List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
			model.addAttribute("artistList", artistList);
			
			return "admin/goods/items/itemsUpdate";
		}
		
		//4. 서비스 호출하여 상품 업데이트
		try {
			ServiceResult result = admingoodsservice.updateGoodsItem(goods);
			
			if (ServiceResult.OK.equals(result)) {
				ra.addFlashAttribute("successMessage", "상품 정보가 성공적으로 수정됐습니다!!");
				goPage = "redirect:/admin/goods/items/detail?id=" + goods.getGoodsNo(); //수정된 상품의 상세 페이지로 이동!!
			} else {
				log.warn("상품 수정 실패!! goodsNo: {}", goods.getGoodsNo());
				
				model.addAttribute("errorMessage", "상품 수정에 실패했습니다!! 다시 시도해주세요!");
				model.addAttribute("item", goods);
				
				List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
				model.addAttribute("artistList", artistList);
				goPage = "admin/goods/items/itemsUpdate";
			}
		} catch (IllegalArgumentException iae) { //서비스에서 발생시킨 유효성 예외 처리
			log.warn("상품 수정 중 유효하지 않은 인자 예외 발생: {}", iae.getMessage());
			model.addAttribute("errorMessage", iae.getMessage()); //서비스 예외 메시지를 바로 사용!
			
			model.addAttribute("item", goods);
			List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
			model.addAttribute("artistList",artistList);
			
			goPage = "admin/goods/items/itemsUpdate";
		} catch (Exception e) {
			log.error("상품 수정 중 시스템 오류 발생", e);
			model.addAttribute("errorMessage", "시스템 오류로 인해 상품 수정에 실패했습니다!!");
			
			model.addAttribute("item", goods);
			List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
			model.addAttribute("artistList",artistList);
			
			goPage = "admin/goods/items/itemsUpdate";
		}
		
		return goPage;
	}
	
	//상품 삭제
	@PostMapping("/delete")
    public String deleteGoodsItems(
    		@RequestParam("goodsNo") int goodsNo, 
    		RedirectAttributes ra
    		) {
        log.info(">>>>>> 컨트롤러 deleteGoodsItems 진입! goodsNo: {} <<<<<<", goodsNo);
        try {
            // 서비스 계층의 deleteGoodsItems 메서드 호출
            ServiceResult result = admingoodsservice.deleteGoodsItems(goodsNo);

            if (result == ServiceResult.OK) {
                ra.addFlashAttribute("message", "상품이 성공적으로 삭제되었습니다.");
                log.info("상품(goodsNo:{}) 삭제 성공!! 목록으로 리다이렉트!", goodsNo);
                return "redirect:/admin/goods/items/list"; // 삭제 성공 시 목록 페이지로 리다이렉트
            } else {
                ra.addFlashAttribute("errorMessage", "상품 삭제에 실패했습니다!!!");
                log.warn("상품(goodsNo:{}) 삭제 실패!! 서비스 결과: {}", goodsNo, result);

                return "redirect:/admin/goods/items/detail?id=" + goodsNo; 
            }
        } catch (Exception e) {
            
            log.error("상품(goodsNo:{}) 삭제 중 예상치 못한 오류 발생: {}", goodsNo, e.getMessage(), e);
            ra.addFlashAttribute("errorMessage", "상품 삭제 중 예상치 못한 오류가 발생했습니다: " + e.getMessage());

            return "redirect:/admin/goods/items/detail?id=" + goodsNo; 
        }
    }
}
    
