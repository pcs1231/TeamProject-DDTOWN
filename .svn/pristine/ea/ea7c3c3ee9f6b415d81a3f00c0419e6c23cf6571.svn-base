<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<%@ taglib prefix="fmt" uri="jakarta.tags.fmt" %>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%> 

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%-- Assuming product object is set in request scope --%>
	<title>DDTOWN 굿즈샵 - ${not empty goods.goodsNm ? goods.goodsNm : "상품 상세"}</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
 	<link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/pages/goods.css">
</head>
<body class="product-detail-page-body">
    <header class="site-header">
        <div class="logo">
            <a href="../2.main/artist_community_main.html">DDTOWN SQUARE</a>
        </div>
        <nav class="utility-nav">
            <ul id="loggedOutNav">
                <li><a href="../login.html" class="auth-link">로그인</a></li>
                <li><a href="../signup.html" class="signup-link">회원가입</a></li>
            </ul>
            <ul id="loggedInNav" style="display: none">
                <li><a href="#" class="icon-btn" title="알림">🔔</a></li>
                <li><a href="../mypage.html" class="icon-btn" title="마이페이지">👤</a></li>
                <li><a href="#" class="icon-btn" title="고객센터">👩‍💻</a></li>
                <li><a href="#" id="logoutBtn" class="auth-link">로그아웃</a></li>
            </ul>
        </nav>
    </header>

    <nav class="main-navigation">
        <ul>
            <li><a href="goods_shop.html">굿즈샵</a></li>
            <li>
                <a href="#">선호도 조사</a>
                <ul class="submenu">
                    <li><a href="#">인기 투표</a></li>
                </ul>
            </li>
            <li><a href="#">콘서트</a></li>
        </ul>
    </nav>

    <div class="detail-container">
        <c:if test="${not empty goods}">
            <div class="product-main-info-wrapper">
				<section class="product-image-gallery">
				    <%-- goods 객체가 유효한지 먼저 확인 --%>
				    <c:if test="${not empty goods}">
				        <div class="product-main-image-detail">
				            <%-- 메인 이미지: goodsVO의 representativeImageUrl 필드를 사용 --%>
				            <img src="${not empty goods.representativeImageUrl ? goods.representativeImageUrl : 'https://via.placeholder.com/550x550/E6E6FA/000000?text=Album+Main'}" 
				                 alt="상품 메인 이미지" id="mainProductImageDetail">
				        </div>
				        <div class="product-thumbnail-images-detail">
				            <%-- 썸네일 이미지: goodsVO의 attachmentFileList를 순회하며 AttachmentFileDetailVO의 webPath 사용 --%>
				            <%-- attachmentFileList가 비어있지 않은 경우에만 반복 --%>
				            <c:if test="${not empty goods.attachmentFileList}">
				                <c:forEach var="file" items="${goods.attachmentFileList}" varStatus="loop">
				                    <%-- 대표 이미지와 썸네일 이미지가 중복되지 않도록 필요하다면 조건을 추가할 수 있습니다.
				                         예: <c:if test="${file.fileNo ne goods.representativeImageFile.fileNo}"> --%>
				                    <img src="${file.webPath}" 
				                         alt="썸네일 ${loop.count}" 
				                         class="${loop.first ? 'active' : ''}" <%-- 첫 번째 이미지만 'active' 클래스 부여 --%>
				                         onclick="changeDetailMainImage('${file.webPath}', '550x550', this)">
				                </c:forEach>
				            </c:if>
				            
				            <%-- 첨부파일(썸네일 포함)이 아예 없거나, 모든 파일이 필터링되어 썸네일로 표시할 것이 없는 경우의 폴백 이미지 --%>
				            <%-- 여기서는 goods.attachmentFileList가 비어있을 때만 폴백 처리합니다. --%>
				            <c:if test="${empty goods.attachmentFileList}">
				                <img src="https://via.placeholder.com/70x70/E6E6FA/000000?text=Thumb1" alt="썸네일 1" class="active" onclick="changeDetailMainImage(this.src, '550x550', this)">
				                <img src="https://via.placeholder.com/70x70/D8BFD8/000000?text=Thumb2" alt="썸네일 2" onclick="changeDetailMainImage(this.src, '550x550', this)">
				            </c:if>
				        </div>
				    </c:if>
				    <%-- goods 객체가 아예 없는 경우 (상품 번호가 잘못되었거나 삭제된 경우 등) --%>
				    <c:if test="${empty goods}">
				        <div style="text-align: center; padding: 50px;">
				            <p>상품 정보를 찾을 수 없습니다.</p>
				            <img src="https://via.placeholder.com/550x550/E6E6FA/000000?text=Product+Not+Found" alt="상품 찾을 수 없음" style="max-width: 100%;">
				        </div>
				    </c:if>
				</section>

                <section class="product-purchase-info">
                        <%-- 컨트롤러에서 "goods"라는 이름으로 넘겨준 객체를 사용합니다. --%>
					    <div class="artist-tag">${goods.artGroupNo}</div>
					    <h1 class="product-name-detail">${not empty goods.goodsNm ? goods.goodsNm : "상품명 없음"}</h1>
					    <p class="product-short-description">${not empty goods.goodsContent ? goods.goodsContent : "상품 설명이 없습니다."}</p>

                    <div class="product-price-detail-area">
                        <%-- Initial price set to 0, will be updated by JS if an option is selected --%>
                        <div class="product-price-detail" id="productPrice">${goods.goodsPrice }<span class="currency">원</span></div>
                        <div class="shipping-info-summary">배송비 3,000원 (50,000원 이상 구매 시 무료)</div>
                    </div>
				
					
					<div class="product-options-detail">
					    <div class="option-group">
					        <label for="productOption">옵션 선택</label>
					        <select id="productOption" name="productOption">
					            <option value="">옵션을 선택해주세요</option>
					            <c:forEach var="option" items="${optionList}">
					                <option value="${option.goodsOptNo}" data-price="${option.goodsOptPrice}" data-name="<c:out value='${option.goodsOptNm}'/>">
					                    <c:out value="${option.goodsOptNm}"/> - <fmt:formatNumber value="${option.goodsOptPrice}" type="number" groupingUsed="true" />원
					                </option>
					            </c:forEach>
					        </select>
					    </div>
	
						<div id="selectedOptionArea" style="margin-top: 10px; margin-bottom: 15px;">
						    	
						</div>
					</div>
				
					<div class="total-price-summary">
					    <span class="total-label">총 상품금액:</span>
					    <span class="total-amount" id="totalProductPriceDetail">
					        <c:choose>
					            <c:when test="${not empty optionList}">0</c:when>
					            <c:otherwise><fmt:formatNumber value="${goods.goodsPrice}" type="number" groupingUsed="true" /></c:otherwise>
					        </c:choose>
					         원
					    </span>
					</div>

                    <div class="product-actions-detail">
                        <button class="btn-action-detail wishlist" id="addToWishlistBtnDetail">❤️ 찜하기</button>
						<form id="addToCartForm" action="/goods/cart" method="post">
							<button type="button" class="btn-action-detail cart" id="addToCartBtnDetail">장바구니</button>
							<input type="hidden" name="goodsNo" value="${goods.goodsNo}">
							<sec:csrfInput/>
						</form>
                        <button class="btn-action-detail order" id="orderNowBtnDetail">바로 주문</button>
                    </div>
                </section>
            </div>

            <div class="product-info-tabs-container">
                <nav class="product-info-tabs">
                    <a href="#" class="tab-link active" data-tab-target="productDescription">상품 상세</a>
                    <a href="#" class="tab-link" data-tab-target="shippingGuide">배송/교환/환불 안내</a>
                </nav>
					<div id="productDescription" class="tab-pane active">
					    <h4>상품 정보</h4>
					    <p>${not empty goods.goodsContent ? goods.goodsContent : "상세 상품 정보가 없습니다."}</p>
					
					    <%-- 상품 상세 이미지 출력 --%>
					    <c:set var="hasDetailImages" value="false"/>
					    <c:forEach var="file" items="${goods.attachmentFileList}">
					        <c:if test="${file.webPath ne goods.representativeImageUrl}">
					            <img src="${file.webPath}" alt="상품 상세 이미지 - ${file.fileOriginalNm}" style="max-width: 100%; height: auto; display: block; margin: 10px 0;">
					            <c:set var="hasDetailImages" value="true"/>
					        </c:if>
					    </c:forEach>

					    <c:if test="${empty goods.attachmentFileList or not hasDetailImages}">
					         <img src="https://via.placeholder.com/700x400/f0f0f0/333?text=상품+상세+이미지+없음" alt="상품 상세 이미지 없음" style="max-width: 100%; height: auto; display: block; margin: 10px 0;">
					    </c:if>
					</div>
                    <div id="shippingGuide" class="tab-pane">
                        <h4>배송/교환/환불 안내</h4>
                        <p><strong>배송 안내</strong><br> - 기본 배송비는 3,000원이며, 50,000원 이상 구매 시 무료배송입니다.<br> - 주문일로부터 평균 2~5 영업일 이내 발송됩니다. (예약 상품 제외)</p>
                        <p><strong>교환/환불 안내</strong><br> - 상품 수령 후 7일 이내에 신청 가능합니다.<br> - 단순 변심의 경우 왕복 배송비가 부과됩니다.<br> - 상품 불량 및 오배송의 경우 배송비는 판매자 부담입니다.</p>
                    </div>
                </div>
            </div>
        </c:if>
        <c:if test="${empty goodsList}">
            <p style="text-align: center; padding: 50px;">상품 정보를 불러올 수 없습니다.</p>
        </c:if>
    </div>

    <nav class="floating-nav">
        <a href="goods_cart.html" class="floating-btn" title="장바구니">
            🛒
            <span class="item-count-badge" id="cartItemCount" style="display: none;">0</span>
        </a>
        <a href="goods_wishlist.html" class="floating-btn" title="찜목록">
            ❤️
            <span class="item-count-badge" id="wishlistItemCount" style="display: none;">0</span>
        </a>
    </nav>

<script>
document.addEventListener('DOMContentLoaded', function () {
	//상품 옵션
    const productOptionSelect = document.getElementById('productOption');
    const selectedOptionArea = document.getElementById('selectedOptionArea');
    const totalProductPriceDetailSpan = document.getElementById('totalProductPriceDetail');

    // 총 상품 금액을 업데이트하는 함수
    function updateTotalPrice() {
        let currentTotal = 0;
        const selectedItems = selectedOptionArea.querySelectorAll('.selected-option-item');
        
        selectedItems.forEach(item => {
            const price = parseFloat(item.dataset.optionPrice);
            const quantity = parseInt(item.querySelector('.quantity').value);
            currentTotal += price * quantity;
        });

        totalProductPriceDetailSpan.textContent = currentTotal.toLocaleString('ko-KR');
    }

    productOptionSelect.addEventListener('change', function () {
    		let list = document.getElementsByClassName("selected-option-item");
        const selectedOption = this.options[this.selectedIndex];
        const optionValue = selectedOption.value; 
        const optionName = selectedOption.dataset.name;
    		
    		for(let i=0; i<list.length; i++){
    			if(optionName.trim() == list[i].dataset.optionName.trim()){
    				alert("이미 선택하신 상품입니다.");
    				
    				this.value = '';
	   			return false;
    			}
    		}

        if (!optionValue || !optionName) {
            // optionName이 없는 경우도 실제로는 선택되면 안 되므로 함께 체크
            if (!optionName && optionValue) { // optionValue는 있는데 이름이 없는 경우 경고
                 console.warn("선택된 옵션에 data-name이 없습니다:", selectedOption);
            }
            return;
        }
        
        const optionPrice = parseFloat(selectedOption.dataset.price);
        const optionItemDiv = document.createElement('div');
        
        optionItemDiv.classList.add('selected-option-item');
        optionItemDiv.dataset.optionId = optionValue;    
        optionItemDiv.dataset.optionName = optionName; // 저장할 때는 원본 optionName 저장
        optionItemDiv.dataset.optionPrice = optionPrice; 

        optionItemDiv.innerHTML = `
            <span class="option-name">\${optionName}</span>
            <span class="option-price-display">(\${optionPrice.toLocaleString('ko-KR')}원)</span>
            <div>
                <label for="quantity-${optionValue}" class="visually-hidden">${optionName} 수량</label>
                <input type="number" id="quantity-\${optionValue}" class="quantity" value="1" min="1">
            </div>
            <button type="button" class="remove-option-btn" title="옵션 삭제">&times;</button>
        `;
        
        selectedOptionArea.appendChild(optionItemDiv);

        const quantityInput = optionItemDiv.querySelector('.quantity');
        quantityInput.addEventListener('input', function() {
            if (parseInt(this.value) < 1 || isNaN(parseInt(this.value))) {
                this.value = 1;
            }
            updateTotalPrice();
        });

        const removeButton = optionItemDiv.querySelector('.remove-option-btn');
        removeButton.addEventListener('click', function () {
            optionItemDiv.remove();
            updateTotalPrice();
        });

        updateTotalPrice();
        this.value = '';
    });
    
 // 장바구니 버튼 클릭 이벤트
    document.getElementById('addToCartBtnDetail').addEventListener('click', function() {
        const form = document.getElementById('addToCartForm');
        const goodsNo = form.querySelector('input[name="goodsNo"]').value;
        const csrfToken = form.querySelector('input[name="_csrf"]').value;
        
        // 선택된 모든 옵션 정보를 담을 배열 (여기에 GoodsCartVO와 매핑될 데이터가 들어갑니다)
        const cartItems = [];
        // selectedOptionArea에서 모든 동적 옵션 항목(.selected-option-item)을 찾습니다.
        const selectedOptionElements = selectedOptionArea.querySelectorAll('.selected-option-item');

        // 장바구니에 담을 옵션이 하나도 없는 경우
        if (selectedOptionElements.length === 0) {
            alert("장바구니에 담을 옵션을 선택해주세요.");
            return;
        }

        // 각 선택된 옵션 항목을 순회하며 데이터 추출
        selectedOptionElements.forEach(item => {
            const goodsOptNo = parseInt(item.dataset.optionId); // data-optionId에 저장된 옵션 번호
            const cartQty = parseInt(item.querySelector('.quantity').value); // 해당 옵션의 수량

            // 유효성 검사 (옵션 번호와 수량이 유효한지 확인)
            if (isNaN(goodsOptNo) || goodsOptNo <= 0) {
                console.error("유효하지 않은 goodsOptNo:", goodsOptNo, "항목:", item);
                alert("유효하지 않은 상품 옵션이 포함되어 있습니다. 다시 시도해주세요.");
                cartItems.length = 0; // 오류 발생 시 배열 비우고 중단
                return; 
            }
            if (isNaN(cartQty) || cartQty < 1) {
                console.error("유효하지 않은 수량:", cartQty, "항목:", item);
                alert("상품 수량은 1개 이상이어야 합니다.");
                cartItems.length = 0; // 오류 발생 시 배열 비우고 중단
                return; 
            }

            // 각 옵션-수량 쌍을 객체로 만들어 배열에 추가
            cartItems.push({
                goodsNo: goodsNo,       // 상품 번호 (hidden input에서 가져옴)
                goodsOptNo: goodsOptNo, // 현재 옵션의 번호
                cartQty: cartQty        // 현재 옵션의 수량
                // GoodsCartVO에 있는 다른 필드(memUsername, cartTotalAmount 등)는 서버에서 처리하거나,
                // 장바구니 페이지에서 조회하여 표시할 정보이므로 클라이언트에서 모두 보낼 필요 없습니다.
            });
        });

        // 유효성 검사 후 cartItems 배열이 비어있으면 (오류 발생 시) 중단
        if (cartItems.length === 0) { 
            return;
        }

        // Ajax 요청 (fetch API 사용)
        fetch('/goods/cart/addMultiple', { // 컨트롤러의 새로운 엔드포인트
            method: 'POST',
            headers: {
                'Content-Type': 'application/json', // 보내는 데이터가 JSON임을 명시
                'X-CSRF-TOKEN': csrfToken          // CSRF 토큰 헤더에 포함 (보안)
            },
            body: JSON.stringify(cartItems) // cartItems 배열을 JSON 문자열로 변환하여 전송
        })
        .then(response => {
            // 서버 응답이 성공(2xx)인지 확인
            if (!response.ok) {
                // HTTP 에러 상태 (예: 401 Unauthorized, 500 Internal Server Error)
                return response.json().then(errorData => {
                    throw new Error(errorData.message || '장바구니 추가 중 오류 발생');
                });
            }
            return response.json(); // 응답 본문을 JSON으로 파싱
        })
        .then(data => {
            // 서버에서 반환된 JSON 데이터 처리 (예: {"success": true, "message": "..."})
            if (data.success) { 
                alert("상품이 장바구니에 추가되었습니다!");
                window.location.href = "/goods/cart/list"; // 장바구니 페이지로 이동
            } else {
                alert(data.message || "장바구니 추가 실패!");
            }
        })
        .catch(error => {
            // 네트워크 오류나 위에서 throw된 에러 처리
            console.error('장바구니 추가 에러:', error);
            alert("장바구니 추가 중 알 수 없는 오류가 발생했습니다: " + error.message);
        });
    });
});
</script>
</body>
</html>