package kr.or.ddit.ddtown.controller.goods;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.ddtown.service.goods.IGoodsNoticeService;
import kr.or.ddit.ddtown.service.goods.IGoodsService;
import kr.or.ddit.vo.goods.goodsNoticeVO;
import kr.or.ddit.vo.goods.goodsOptionVO;
import kr.or.ddit.vo.goods.goodsVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/goods")
public class goodsController {
	
	@Autowired
	public IGoodsService service;
	
	@Autowired
	public IGoodsNoticeService noticeservice;
	
	@GetMapping("/main")
	public String goodsShopList(Model model) {
		List<goodsVO> goodsList = service.goodsList();
		model.addAttribute("goodsList", goodsList);
		
		//굿즈샵 공지사항 하나 띄우기
		goodsNoticeVO noticeToShow = noticeservice.getMainNotice();
		model.addAttribute("notice", noticeToShow);
		return "goods/main";
	}
	
	@GetMapping("/detail")
	public String goodsShopDetail(
			@RequestParam("goodsNo") int goodsNo, 
			Model model,
			@AuthenticationPrincipal Object principal
			) throws Exception {
		
		MemberVO authMember = null;
		log.info("### 디버그: 주입된 principal 객체: {}", principal); // Principal 객체 타입 확인
		
		//회원 정보가 있다면 Model에 추가!
		//비로그인 상태일 경우 authMember는 null 처리!
		
		if (principal instanceof CustomUser) { // 일반 로그인 (CustomUser)인 경우
            CustomUser customUser = (CustomUser) principal;
            authMember = customUser.getMemberVO();
            log.info("### 디버그: CustomUser 타입에서 MemberVO 추출: {}", authMember);
        } else if (principal instanceof CustomOAuth2User) { // OAuth2 로그인 (CustomOAuth2User)인 경우
            CustomOAuth2User customOAuth2User = (CustomOAuth2User) principal;
            authMember = customOAuth2User.getMemberVO();
            log.info("### 디버그: CustomOAuth2User 타입에서 MemberVO 추출: {}", authMember);
        } else {
            // 다른 Principal 타입이 올 수도 있습니다 (예: DefaultOAuth2User).
            // 이때는 직접 attribute에서 MemberVO를 구성해야 합니다.
            // (이 경우는 거의 없을 것이므로 CustomUser, CustomOAuth2User만 다뤄도 충분)
            log.warn("### 디버그: 알 수 없는 Principal 타입: {}", principal.getClass().getName());
        }
        
        // authMember가 여전히 null이거나, username이 null인 경우 "비회원"으로 처리됩니다.
        model.addAttribute("memberInfo", authMember);
        log.info("상세 페이지 컨트롤러 호출! 인증된 회원 정보: {}", authMember != null ? authMember.getMemUsername(): "비회원");
        
		//굿즈 상품 리스트 가져오기
		List<goodsVO> goodsList = service.goodsList();
		model.addAttribute("goodsList", goodsList);
		
		//굿즈 상품 하나 불러오기.........?
		goodsVO goods = service.getGoodsDetail(goodsNo);
		model.addAttribute("goods", goods);
		log.info("서비스에서 반환된 goodsVO: {}", goods);
		log.info("컨트롤러에서 받은 goodsNo: {}", goodsNo);
		
		//굿즈 옵션 가져오기
		List<goodsOptionVO> optionList = service.optionList(goodsNo);
		model.addAttribute("optionList", optionList);
		log.info("옵션 목록: {}", optionList);
	
		return "goods/detail";
	}
	
}
