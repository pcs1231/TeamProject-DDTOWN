package kr.or.ddit.ddtown.controller.community;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.http.SecurityHeaders;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import io.micrometer.common.util.StringUtils;
import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.community.ICommunityMainPageService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.artist.AlbumVO;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.community.CommunityPostVO;
import kr.or.ddit.vo.community.CommunityProfileVO;
import kr.or.ddit.vo.community.CommunityVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/community")
public class CommunityMainPageController {
	
	@Autowired
	private ICommunityMainPageService artistMainPageService;
	
	@GetMapping("/mainPage")
	public String CommunityMainPage(ArtistGroupVO groups, Model model) {
		log.info("CommunityMainPage() 실행");
		
		// 서비스 호출 - 그룹 리스트
		List<ArtistGroupVO> groupList = artistMainPageService.getGroupLists();
		
		model.addAttribute("groups", groupList);
		return "community/communityMainPage";
	}
	
	@GetMapping("/gate/{artGroupNo}")
	public String artistGatePage(Model model, @PathVariable int artGroupNo) {
		log.info("artistGatePage() 실행");
		
		ArtistGroupVO artistGroupVO = artistMainPageService.getGroupInfo(artGroupNo);
		List<AlbumVO> albumList = artistMainPageService.getGroupAlbum(artGroupNo);
		
		artistGroupVO.setAlbumList(albumList);
		model.addAttribute("group", artistGroupVO);
		return "community/communityGate";
	}
	
	@GetMapping("/gate/{artGroupNo}/apt")
	public String aptMain(CommunityVO communityVO,Model model) {
		
		log.info("아티스트 그룹 번호 & 페이징네이션 : " + communityVO);
		
		// 접속중인 사용자 정보 가져오기
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    MemberVO memberVO = null;
	    if(principal instanceof CustomUser) {
	        memberVO = ((CustomUser) principal).getMemberVO();
	    }else if(principal instanceof CustomOAuth2User) {
	        memberVO = ((CustomOAuth2User) principal).getMemberVO();
	    }
	    
	    // 접속중인 사용자가 해당 아티스트 커뮤니티에 팔로우 하고 있는 지 여부
	    int artGroupNo = communityVO.getArtGroupNo();
	    String memUsername = memberVO.getMemUsername();
	    Map<String, Object> currentUser = new HashMap<String, Object>();
	    currentUser.put("artGroupNo", artGroupNo);
	    currentUser.put("memUsername", memUsername);
	    
	    CommunityProfileVO currentUserComu = artistMainPageService.currentUserComufollowing(currentUser);
	    
	    // 해당 커뮤니티에 팔로우가 되어 있지 않다면 
	    if(currentUserComu == null) {
	    	
	    	return "redirect:/community/gate/" + communityVO.getArtGroupNo();
	    }
	    
		
		PaginationInfoVO<CommunityVO> pagingVO = new PaginationInfoVO<>();
		
		int page = communityVO.getPage();
		String searchWord = communityVO.getSearchWord();
		String searchType = communityVO.getSearchType();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
		}
		if(StringUtils.isNotBlank(searchType)) {
			pagingVO.setSearchType(searchType);
		}
		
		pagingVO.setCurrentPage(page);
		communityVO.setStartRow(pagingVO.getStartRow());
		communityVO.setEndRow(pagingVO.getEndRow());
		
		List<CommunityPostVO> postVO = null;
		int totalRecord = 0;
		String currentPost = "";
		
		if(communityVO.isArtistTabYn()) {
			postVO = artistMainPageService.getArtistPostList(communityVO);
			totalRecord = artistMainPageService.getPostTotal(communityVO);
			model.addAttribute("artistPostVO", postVO);
			model.addAttribute("fanPostVO", new CommunityVO());
			currentPost = "artist";
			log.info("현재 탭 : " + currentPost);
			log.info("게시물 정보 : " + postVO);
		}else {
			postVO = artistMainPageService.getFanPostList(communityVO);
			totalRecord = artistMainPageService.getPostTotal(communityVO);
			model.addAttribute("fanPostVO", postVO);
			model.addAttribute("artistPostVO", new CommunityVO());
			currentPost = "fan";
			log.info("현재 탭 : " + currentPost);
			log.info("게시물 정보 : " + postVO);
		}
		
		if(postVO != null && totalRecord > 0) {
			pagingVO.setTotalRecord(totalRecord);
		}else {
			pagingVO.setTotalRecord(0);
		}
		
		
		ArtistGroupVO artistGroupVO = artistMainPageService.getCommunityInfo(communityVO.getArtGroupNo());
		
		log.info("communityVO : " + artistGroupVO);
		
		model.addAttribute("artistGroupVO", artistGroupVO);
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("communityVO", communityVO);		
		return "community/apt/main";
	}
	
}
