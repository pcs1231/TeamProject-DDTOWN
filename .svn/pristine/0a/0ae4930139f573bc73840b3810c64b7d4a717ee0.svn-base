package kr.or.ddit.ddtown.service.goods.cancel;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.admin.goods.order.IAdminOrdersMapper;
import kr.or.ddit.ddtown.mapper.goods.IGoodsMapper;
import kr.or.ddit.ddtown.mapper.orders.ICancelMapper;
import kr.or.ddit.ddtown.mapper.orders.IPaymentMapper;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.order.OrderCancelVO;
import kr.or.ddit.vo.order.OrderDetailVO;
import kr.or.ddit.vo.order.OrdersVO;
import kr.or.ddit.vo.order.PaymentVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class CancelServiceImpl implements ICancelService {
	
	@Autowired
	private IAdminOrdersMapper adminOrdersMapper; //주문 상태 업뎃용
	
	@Autowired
	private IGoodsMapper goodsMapper; //재고 복구용
	
	@Autowired
	private ICancelMapper cancelMapper; //Cancel 테이블 기록용
	
	@Autowired
	private IPaymentMapper paymentMapper; //결제 상태 업데이트용
	
	@Override
    @Transactional
    public ServiceResult processAdminOrderCancel(OrdersVO order, String empUsername) {
        log.info("### CancelServiceImpl - processAdminOrderCancel 호출: orderId={}, empUsername={}", order.getOrderNo(), empUsername);

        try {
            // 1. ORDERS 테이블의 주문 상태를 '취소 완료'로 변경 (OSC008)
            OrdersVO updateOrderVO = new OrdersVO();
            updateOrderVO.setOrderNo(order.getOrderNo());
            updateOrderVO.setOrderStatCode("OSC008"); // 공통 코드 '취소 완료'

            int statusUpdateCount = adminOrdersMapper.updateOrder(updateOrderVO);
            if (statusUpdateCount <= 0) {
                log.error("주문(orderId={}) 상태 변경 실패.", order.getOrderNo());
                throw new RuntimeException("주문 상태 변경 실패");
            }
            log.info("주문(orderId={}) 상태가 '취소 완료(CSC003)'로 변경되었습니다.", order.getOrderNo());

            // 2. 주문 상세 정보의 재고 복구 및 CANCEL 테이블 기록 
            if (order.getOrderDetailList() != null && !order.getOrderDetailList().isEmpty()) {
                for (OrderDetailVO detail : order.getOrderDetailList()) {
                    // 각 주문 상세 항목에 대해 재고 복구
                    log.info("### CancelServiceImpl - 재고 복구 시도: orderDetNo={}, goodsNo={}, goodsOptNo={}, orderDetQty={}",
                             detail.getOrderDetNo(), detail.getGoodsNo(), detail.getGoodsOptNo(), detail.getOrderDetQty());

                    int updatedRows = goodsMapper.increaseGoodsStock(
                        detail.getGoodsNo(),
                        detail.getGoodsOptNo(),
                        detail.getOrderDetQty()
                    );

                    log.info("### CancelServiceImpl - increaseGoodsStock 호출 (재고 복구): 상품번호={}, 옵션번호={}, 수량={}, 결과={}",
                             detail.getGoodsNo(), detail.getGoodsOptNo(), detail.getOrderDetQty(), updatedRows);

                    if (updatedRows == 0) {
                        log.error("상품(goodsNo={}, goodsOptNo={}) 재고 복구 실패. 주문 수량={}",
                                  detail.getGoodsNo(), detail.getGoodsOptNo(), detail.getOrderDetQty());
                        throw new RuntimeException("재고 복구 실패");
                    }

                    // 각 주문 상세 항목에 대해 CANCEL 테이블에 취소 기록 INSERT
                    OrderCancelVO cancelVO = new OrderCancelVO();
                    cancelVO.setOrderNo(order.getOrderNo());
                    cancelVO.setGoodsNo(detail.getGoodsNo()); 

                    cancelVO.setCancelType("CT003"); // 관리자 주문 취소
                    cancelVO.setCancelReasonCode("CRC001"); // 예시: 고객 변심
                    cancelVO.setCancelStatCode("CSC003"); // 취소 완료

                    cancelVO.setEmpUsername(empUsername);
                    cancelVO.setMemUsername(order.getCustomerId());
                    cancelVO.setCancelReasonDetail("관리자 직접 전체 취소 (결제 API 미연동 테스트)");

                    // 현재 루프의 상품에 대한 취소 수량
                    cancelVO.setCancelItemQty(detail.getOrderDetQty());

                    double pricePerItem = (double)order.getOrderTotalPrice() / order.getOrderDetailList().stream().mapToInt(OrderDetailVO::getOrderDetQty).sum();
                    int cancelPrice = (int) (detail.getOrderDetQty() * pricePerItem);

                    cancelVO.setCancelReqPrice(cancelPrice); // 각 상품별 취소 요청 금액
                    cancelVO.setCancelResPrice(cancelPrice); // 각 상품별 최종 처리 금액

                    cancelVO.setCancelAccountNo(null);
                    cancelVO.setCancelAccountHol(null);

                    int cancelInsertCount = cancelMapper.insertCancel(cancelVO);
                    if (cancelInsertCount <= 0) {
                        log.error("CANCEL 테이블에 상품(goodsNo={}) 취소 기록 INSERT 실패. orderId={}", detail.getGoodsNo(), order.getOrderNo());
                        throw new RuntimeException("상품 취소 기록 생성 실패");
                    }
                    log.info("CANCEL 테이블에 주문(orderId={}) 상품(goodsNo={}) 취소 기록이 성공적으로 추가되었습니다.", order.getOrderNo(), detail.getGoodsNo());
                }
            } else {
                log.warn("### CancelServiceImpl - 주문(orderNo={}) 상세 정보가 없어 재고 복구 및 취소 기록 대상이 없습니다.", order.getOrderNo());
                // 주문 상세 정보가 없을 경우, 추가적인 예외 처리 또는 로깅 필요
                throw new RuntimeException("주문 상세 정보 없음. 재고 복구 및 취소 기록 불가.");
            }

         // TODO: 결제 취소 연동 로직 구현 필요 (PG사 API 호출 등) - 전체 주문에 대해 한 번만!
            // 🚨🚨🚨 여기에 결제 상태 업데이트 로직 추가 🚨🚨🚨
            PaymentVO paymentToUpdate = new PaymentVO();
            paymentToUpdate.setOrderNo(order.getOrderNo());
            paymentToUpdate.setPaymentStatCode("PSC003"); // 결제 취소 코드 (제공해주신 PSC003)

            // adminOrdersMapper를 사용하여 PAYMENT 테이블 업데이트
            // 이 메서드는 IAdminOrdersMapper에 'updatePaymentStatusForOrder' 등으로 정의되어 있어야 합니다.
            int paymentUpdateResult = paymentMapper.updatePaymentStatus(paymentToUpdate); // 이 메서드를 호출
            // 또는 IPaymentMapper를 사용한다면: paymentMapper.updatePaymentStatus(paymentToUpdate);

            if (paymentUpdateResult <= 0) {
                log.error("결제(orderNo={}) 상태를 '취소(PSC003)'로 업데이트 실패.", order.getOrderNo());
                throw new RuntimeException("결제 상태 업데이트 실패");
            }
            log.info("결제(orderNo={}) 상태가 '취소(PSC003)'로 성공적으로 변경되었습니다.", order.getOrderNo());

            // PG사 API 호출 로직은 여기에 추가 (DB 상태 변경 후 호출하는 것이 일반적)
            // 예: pgService.callCancelApi(order.getOrderNo(), cancelVO.getCancelReqPrice());

            return ServiceResult.OK;

        } catch (Exception e) {
            log.error("CancelServiceImpl에서 주문 취소 처리 중 예외 발생: {}", e.getMessage(), e);
            throw new RuntimeException("주문 취소 처리 중 오류 발생", e);
        }
    }

    /**
     * 검색 및 필터링 조건에 따라 취소/환불 내역을 조회합니다.
     * 이 메서드는 사용자가 검색 또는 필터링 조건을 입력했을 때 AJAX 요청으로 호출됩니다.
     * @param filterParams 검색 키워드(searchKeyword)와 상태 코드(statusCode)를 포함하는 Map
     * @return 필터링된 OrderCancelVO 목록
     */
    @Override
    public int getTotalCancelRefundCount(PaginationInfoVO<OrderCancelVO> pagingVO) {
        log.info("getTotalCancelRefundCount() 호출: 필터링 조건 - {}", pagingVO.getSearchMap());
        return cancelMapper.selectTotalCancelRefundCount(pagingVO);
    }

	@Override
	public OrderCancelVO selectCancelDetail(int cancelNo) {
		return cancelMapper.selectCancelDetail(cancelNo); // 매퍼 호출
	}

	@Override
	public int updateCancelRefund(OrderCancelVO orderCancelVO) {
        log.info("취소/환불 데이터 업데이트 서비스 호출: {}", orderCancelVO);
        return cancelMapper.updateCancelRefund(orderCancelVO);
	}

    @Override
    public List<OrderCancelVO> getFilteredCancelRefunds(PaginationInfoVO<OrderCancelVO> pagingVO) {
        log.info("getFilteredCancelRefunds() 호출: 필터링 조건 - {}", pagingVO.getSearchMap());
        // PaginationInfoVO 객체에는 이미 startRow와 endRow가 계산되어 있으므로, Mapper는 이 값들을 사용하면 됩니다.
        return cancelMapper.selectFilteredCancelRefunds(pagingVO);
    }
}
