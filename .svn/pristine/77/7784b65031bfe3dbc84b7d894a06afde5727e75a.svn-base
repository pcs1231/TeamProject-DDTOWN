package kr.or.ddit.ddtown.service.admin.goods.orders;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.admin.goods.order.IAdminOrdersMapper;
import kr.or.ddit.ddtown.mapper.file.IAttachmentFileMapper;
import kr.or.ddit.ddtown.service.file.IFileService;
import kr.or.ddit.ddtown.service.goods.cancel.ICancelService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import kr.or.ddit.vo.order.OrderDetailVO;
import kr.or.ddit.vo.order.OrdersVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AdminOrdersServiceImpl implements IAdminOrdersService {
	
	@Autowired
	private IAdminOrdersMapper adminOrdersMapper;
	
	@Autowired
	private IAttachmentFileMapper attachmentFileMapper;
	
	@Autowired
	private IFileService fileService;
	
	@Autowired
	private ICancelService cancelService;

	@Override
	public int getTotalOrdersCount(PaginationInfoVO<OrdersVO> pagingVO) {
		
		return adminOrdersMapper.getTotalOrdersCount(pagingVO);
	}

	@Override
	public List<OrdersVO> getAllOrders(PaginationInfoVO<OrdersVO> pagingVO) {
		
		return adminOrdersMapper.getAllOrders(pagingVO);
	}

	@Override
    public OrdersVO getOrderDetail(int orderNo) {
        log.info("### AdminOrdersServiceImpl - getOrderDetail 호출: orderNo={}", orderNo);
        OrdersVO order = adminOrdersMapper.getOrderDetail(orderNo);

        if (order != null && order.getOrderDetailList() != null && !order.getOrderDetailList().isEmpty()) {
            for (OrderDetailVO detail : order.getOrderDetailList()) {
                if (detail.getGoodsFileGroupNo() > 0) {
                    log.debug("상품 번호 {}의 파일 그룹 번호: {}", detail.getGoodsNo(), detail.getGoodsFileGroupNo());
                    
                    // ⭐ IFileService의 getRepresentativeFileByGroupNo() 메서드 사용
                    try {
                        AttachmentFileDetailVO representativeFile = fileService.getRepresentativeFileByGroupNo(detail.getGoodsFileGroupNo());
                        if (representativeFile != null) {
                            // getRepresentativeFileByGroupNo에서 이미 webPath를 설정해 주므로 바로 사용
                            detail.setRepresentativeImageUrl(representativeFile.getWebPath());
                            log.debug("생성된 이미지 URL: {}", representativeFile.getWebPath());
                        } else {
                            log.warn("파일 그룹 번호 {}에 해당하는 대표 파일이 없습니다.", detail.getGoodsFileGroupNo());
                            detail.setRepresentativeImageUrl("/resources/images/no_image.png"); // 기본 이미지 경로
                        }
                    } catch (Exception e) {
                        log.error("파일 그룹 번호 {}의 대표 파일 조회 중 오류 발생: {}", detail.getGoodsFileGroupNo(), e.getMessage(), e);
                        detail.setRepresentativeImageUrl("/resources/images/error_image.png"); // 오류 시 대체 이미지
                    }
                } else {
                    log.info("상품 번호 {}에 연결된 파일 그룹 번호가 없습니다.", detail.getGoodsNo());
                    detail.setRepresentativeImageUrl("/resources/images/no_image.png"); // 기본 이미지 경로
                }
            }
        }
        return order;
    }
	
	@Override
    @Transactional // 트랜잭션 관리
    public ServiceResult cancelOrder(int orderNo, String empUsername) {
        log.info("### AdminOrdersServiceImpl - cancelOrder 호출: orderNo={}", orderNo);

        try {
            // 1. 주문 상세 정보 조회 (재고 복구, 취소 기록 생성을 위해)
            OrdersVO order = adminOrdersMapper.getOrderDetail(orderNo);
            if (order == null) {
                log.warn("취소할 주문을 찾을 수 없습니다. orderId={}", orderNo);
                return ServiceResult.FAILED; // 주문이 없는 경우 실패 반환
            }

            // TODO: (필수) 현재 주문 상태 유효성 검사 (여전히 필요)
            // 예: 이미 배송 완료된 주문은 취소 불가. 이미 취소된 주문은 다시 취소 불가.

            // 2. 주문 상태 변경, 재고 복구, CANCEL 테이블 기록 로직을 cancelService로 위임
            // 관리자 직접 취소 시나리오에 맞는 메서드를 ICancelService에 구현해야 합니다.
            // 아래는 예시 메서드명입니다.
            ServiceResult cancelProcessResult = cancelService.processAdminOrderCancel(order, empUsername);

            if (cancelProcessResult == ServiceResult.OK) {
                log.info("주문(orderNo={}) 취소 처리가 성공적으로 위임 및 완료되었습니다.", orderNo);
                return ServiceResult.OK;
            } else {
                log.error("주문(orderNo={}) 취소 처리 위임 실패. cancelProcessResult={}", orderNo, cancelProcessResult);
                // cancelService에서 발생한 오류 메시지를 그대로 전달하거나, 새로운 RuntimeException 발생
                throw new RuntimeException("주문 취소 처리 중 오류 발생 (CancelService)");
            }

        } catch (Exception e) {
            log.error("AdminOrdersServiceImpl에서 주문 취소 중 예외 발생: {}", e.getMessage(), e);
            throw new RuntimeException("주문 취소 처리 중 오류 발생", e); // 트랜잭션 롤백 유도
        }
    }

	/**
     * 주문 상태 코드 및 관리자 메모를 업데이트합니다.
     * @param orderVO 업데이트할 주문 정보를 담은 OrdersVO 객체 (orderNo, orderStatCode, orderMemo 필드 사용)
     * @return 업데이트된 레코드 수
     */
    @Override
    @Transactional
    public int updateOrderStatusAndMemo(OrdersVO orderVO) {

        return adminOrdersMapper.updateOrder(orderVO);
    }

}
