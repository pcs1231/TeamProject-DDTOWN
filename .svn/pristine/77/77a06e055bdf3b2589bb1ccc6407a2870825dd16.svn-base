package kr.or.ddit.ddtown.controller.order;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ddtown.service.goods.cart.ICartService;
import kr.or.ddit.ddtown.service.goods.order.IOrderService;
import kr.or.ddit.ddtown.service.kakaopay.IKakaoPayService;
import kr.or.ddit.vo.goods.GoodsCartVO;
import kr.or.ddit.vo.order.OrderDetailVO;
import kr.or.ddit.vo.order.OrdersVO;
import kr.or.ddit.vo.order.PaymentVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/goods/order")
public class OrderController {
	
	@Autowired
	private IKakaoPayService kakaoPayService;
	
	@Autowired
	private IOrderService orderService;
	
	@Autowired
	private ICartService cartService;
	
	@GetMapping("/checkout")
	public String showOrderForm(
			Model model,
			@AuthenticationPrincipal Object principal,
			RedirectAttributes ra
			) {
		log.info("showOrderForm() 컨트롤러 호출!! 주문 페이지 진입!");
		
		MemberVO authMember = null;
		String username = null;

		// 1. 로그인 여부 확인 및 사용자 정보 추출
		if (principal instanceof CustomUser) {
			authMember = ((CustomUser) principal).getMemberVO();
		} else if (principal instanceof CustomOAuth2User) {
			authMember = ((CustomOAuth2User) principal).getMemberVO();
		}

		if (authMember != null) {
			username = authMember.getMemUsername();
		}

		if (username == null || username.isEmpty()) {
			log.warn("showOrderForm() - 비로그인 상태 접근 시도!");
			ra.addFlashAttribute("message", "로그인 후 주문할 수 있습니다.");
			return "redirect:/login"; // 로그인 페이지로 리다이렉트
		}
		
		model.addAttribute("isLoggedIn", true); // JSP 헤더에서 로그인 상태 표시용
		model.addAttribute("memberInfo", authMember); // JSP에서 배송지 정보 기본값 채우기용
		
		// 2. 주문할 상품 목록 가져오기 (장바구니에서 선택된 상품들)
				//    이 예시에서는 '모든' 장바구니 아이템을 가져온다고 가정합니다.
				//    만약 '선택된' 아이템만 가져와야 한다면, 클라이언트(장바구니 페이지)에서
				//    선택된 상품들의 goodsNo (또는 cartNo) 리스트를 쿼리 파라미터로 넘겨줘야 합니다.
				List<GoodsCartVO> cartItems = new ArrayList<>();
				try {
					cartItems = cartService.getCartItemsUsername(username); // 해당 유저의 모든 장바구니 아이템 조회

					// 장바구니 아이템에 추가 정보 (상품명, 이미지 등) 채우기
					if (cartItems != null && !cartItems.isEmpty()) {
						// cartService.getCartItemsUsername 메소드 안에서 상품 상세 정보를 이미 채워주고 있다고 가정합니다.
						// 만약 아니라면 여기서 goodsService를 사용하여 추가 정보를 채워야 합니다.
						// 예: for (GoodsCartVO item : cartItems) {
						//         goodsVO goods = goodsService.getGoodsDetail(item.getGoodsNo());
						//         if (goods != null) {
						//             item.setGoodsNm(goods.getGoodsNm());
						//             item.setRepresentativeImageUrl(goods.getRepresentativeImageUrl());
						//             // ... 기타 필요한 정보
						//         }
						//     }
					} else {
						log.warn("사용자 {}의 장바구니가 비어있습니다. 주문 페이지로 이동 불가.", username);
						ra.addFlashAttribute("message", "장바구니에 담긴 상품이 없습니다.");
						return "redirect:/goods/cart/list"; // 장바구니 페이지로 리다이렉트
					}
				} catch (Exception e) {
					log.error("주문 상품 목록 조회 중 오류 발생: {}", e.getMessage(), e);
					ra.addFlashAttribute("errorMessage", "주문할 상품 정보를 불러오는 데 실패했습니다.");
					return "redirect:/goods/cart/list"; // 오류 발생 시 장바구니 페이지로 리다이렉트
				}

				model.addAttribute("orderItems", cartItems); // JSP로 주문할 상품 목록 전달

				// 3. 뷰 반환
				return "goods/order";
	}
	
}