package kr.or.ddit.ddtown.service.chat.dm;


import java.security.Principal;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.messaging.simp.SimpMessageSendingOperations;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ddtown.mapper.chat.dm.ChatMessageMapper;
import kr.or.ddit.ddtown.mapper.community.CommunityProfileMapper;
import kr.or.ddit.ddtown.service.community.ICommunityProfileService;
import kr.or.ddit.vo.chat.dm.ChatMessageVO;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Service
public class ChatMessageServiceImpl implements IChatMessageService {
	
	private final ChatMessageMapper chatMessageMapper;
	private final IChatChannelService chatChannelService;
	private final ICommunityProfileService communityService;
	private final SimpMessageSendingOperations messagingTemplate;
	
	private static final Pattern BAD_WORD_PATTERN = Pattern.compile(
			"((시발|씨발|쉬발|ㅆㅂ|ㅅㅂ|ㅈ같|좆같|존나|병신|개새끼|지랄|미친|애미|닥쳐|새끼|염병|엠창|걸레|창년|고자|찐따|육시럴|즐|ㅂㅅ|ㅆㄲ|ㅅㄲ|ㅈ밥|ㅈㄴ|꺼져))",
			Pattern.CASE_INSENSITIVE
			);
	
	// 채팅방 메세지 저장
	@Override
	@Transactional
	public ChatMessageVO saveAndProcessChatMessage(ChatMessageVO message, Principal principal) {
		
		// 1. 현재 로그인한 사용자 정보 가져오기
		String currentUser = principal.getName();
		log.info("name : {}", currentUser);
		
		// 2. 발신자 프로필 번호 가져오기
		int comuProfileNo = chatChannelService.getComuProfileNoForChatChannel(message.getChatChannelNo(), currentUser);
		
		if(comuProfileNo == -1) {
			log.warn("Invalid comuProfileNo for user {}", comuProfileNo);
			return null;
		}
		
		// 3. 커뮤니티 닉네임, 프로필 이미지 가져오기
		Integer artGroupNo = chatChannelService.getArtGroupNoByChatChannelNo(message.getChatChannelNo());
		String comuNicknm = communityService.getComuNicknmByUsername(currentUser, artGroupNo);
		String userProfileImgPath = communityService.getComuProfileImgPath(currentUser, artGroupNo);
		
		// 4. 메세지 전송 시각 및 발신자 설정
		message.setUsername(currentUser);
		message.setComuProfileNo(comuProfileNo);
		message.setComuNicknm(comuNicknm);
		message.setUserProfileImgPath(userProfileImgPath);
		
		if(message.getChatSendDate() == null) {
			message.setChatSendDate(new Date());
		}
		
		// 5. 메세지 타입 코드 설정
		String originalContent = message.getChatContent();
		
		if(ChatMessageVO.MessageType.TALK.equals(message.getType())) {
			message.setChatMsgTypeCode("CMTC001");	// 일반 메세지 타입
		} else if(ChatMessageVO.MessageType.FILE.equals(message.getType())) {
			message.setChatMsgTypeCode("CMTC002");	// 첨부 파일 타입
		} else if(originalContent != null && originalContent.contains("@everyone")) {
			message.setType(ChatMessageVO.MessageType.MENTION_ALL);
			message.setChatMsgTypeCode("CMTC001");
		} else {
			message.setType(ChatMessageVO.MessageType.TALK);
			message.setChatMsgTypeCode("CMTC001");	// 기본 값
		}
		
		try {
			// 6. 비속어 필터링 로직
			Matcher matcher = BAD_WORD_PATTERN.matcher(message.getChatContent());
			if(matcher.find()) {
				sendSystemWarningMessageToUser(currentUser, "🚫 부적절한 단어가 포함되어 메시지가 필터링되었습니다. 🚫");
				return null;
			}
			
			// 7. DB 저장 (매퍼 호출)
			chatMessageMapper.insertMessage(message);
			
			// 8. 채팅 채널 마지막 메세지 날짜 업데이트
			chatChannelService.updateChatLastDate(message.getChatChannelNo());
			
			// 9. 권한 정보 가져오기
			Authentication authentication = (Authentication) principal;
			
			// 10. 모든 참여자에게 메세지 전송
			List<String> participantUsernames = chatChannelService.getChatParticipants(message.getChatChannelNo());
			
			// 11. 메세지 전송 로직
			for(String participantUsername : participantUsernames) {
				
				// 본인 메세지 자신에게 보여야 함
				if(message.getUsername().equals(participantUsername)) {
					messagingTemplate.convertAndSendToUser(participantUsername, "/queue/messages", message);
					continue;
				}
				
				// 상대방 메세지 처리
				List<String> participantRoleCodes = chatChannelService.getUserRoleCodes(participantUsername, message.getChatChannelNo());
				
				boolean isRecipientArtist = participantRoleCodes.contains("PRC001");
				boolean isRecipientMembership =participantRoleCodes.contains("PRC002");
				
				// 아티스트의 경우 모든 메세지 조회 가능
				if(isRecipientArtist) {
					messagingTemplate.convertAndSendToUser(participantUsername, "/queue/messages", message);
					log.debug("메시지 '{}' 아티스트 ({})에게 전송", message.getChatContent(), participantUsername);
				// 멤버십 회원은 아티스트가 보낸 메세지만 볼 수 있음
		        } else if(isRecipientMembership) {
		        	boolean isSenderArtist = authentication.getAuthorities().stream()
		        			.anyMatch(a -> a.getAuthority().equals("ROLE_ARTIST"));
		        			
		        	if(isSenderArtist) {
		        		messagingTemplate.convertAndSendToUser(participantUsername, "/queue/messages", message);
		        		log.debug("메시지 '{}' 멤버십 회원 ({})에게 전송", message.getChatContent(), participantUsername);
		        	}
		        }
			}
			return message;
		}catch (Exception e) {
			log.error("메세지 처리 중 오류 발생 : {}", e.getMessage(), e);
			sendSystemErrorMessageToUser(currentUser, "🚫 메시지 전송 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요. 🚫");
			throw new RuntimeException("채팅 메세지 처리 실패", e);
		}
	}
	
	// 필터링 경고 메세지
	private void sendSystemWarningMessageToUser(String currentUser, String message) {
		ChatMessageVO warnMsg = new ChatMessageVO();
        warnMsg.setUsername("SYSTEM");
        warnMsg.setComuNicknm("시스템");
        warnMsg.setChatContent(message);
        warnMsg.setChatSendDate(new Date());
        warnMsg.setChatMsgTypeCode("CMTC001");
        warnMsg.setType(ChatMessageVO.MessageType.TALK);
        messagingTemplate.convertAndSendToUser(currentUser, "/queue/messages", warnMsg);
		
	}

	// 시스템 메세지
	private void sendSystemErrorMessageToUser(String currentUser, String message) {
		ChatMessageVO errorMsg = new ChatMessageVO();
		errorMsg.setUsername("SYSTEM");
        errorMsg.setComuNicknm("시스템");
        errorMsg.setChatContent(message);
        errorMsg.setChatSendDate(new Date());
        errorMsg.setChatMsgTypeCode("CMTC001");
        errorMsg.setType(ChatMessageVO.MessageType.TALK);
        messagingTemplate.convertAndSendToUser(currentUser,"/queue/messages",errorMsg);
		
	}

	// 파일 첨부 상세 추가
	@Override
	@Transactional
	public void insertAttachFileDetail(AttachmentFileDetailVO fileDetailVO) {
		chatMessageMapper.insertAttachFileDetail(fileDetailVO);		
	}

	// 마지막 메세지 번호 조회
	@Override
	public Integer selectLastMessageNo(int chatChannelNo) {
		return chatMessageMapper.selectLastMessageNo(chatChannelNo);
	}

	// 더보기 : 페이지네이션
	@Override
	public List<ChatMessageVO> getChatMessagesByChannelPaged(int chatChannelNo, int offset, int limit) {
		List<ChatMessageVO> messages = chatMessageMapper.selectChatMessagesByChannelPaged(chatChannelNo, offset, limit);
		
		Integer artGroupNo = chatChannelService.getArtGroupNoByChatChannelNo(chatChannelNo);
		
		for(ChatMessageVO msg : messages) {
			String userProfileImgPath = communityService.getComuProfileImgPath(msg.getUsername(), artGroupNo);
			
			// 프로필 이미지 경로가 유효하지 않으면 null로 설정하여 클라이언트에서 기본 이미지 처리
            if (userProfileImgPath != null && !userProfileImgPath.isEmpty() && !userProfileImgPath.contains("/upload/profile")) {
                userProfileImgPath = null;
            }
			msg.setUserProfileImgPath(userProfileImgPath);
		}
		return messages;
		
	}
	
}
