package kr.or.ddit.ddtown.controller.order;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ddtown.service.goods.cart.ICartService;
import kr.or.ddit.ddtown.service.order.IOrderService;
import kr.or.ddit.ddtown.service.order.payment.IKakaoPayService;
import kr.or.ddit.vo.goods.GoodsCartVO;
import kr.or.ddit.vo.order.OrderDetailVO;
import kr.or.ddit.vo.order.OrdersVO;
import kr.or.ddit.vo.order.PaymentVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/goods/order")
public class OrderController {
	
	@Autowired
	private IKakaoPayService kakaoPayService;
	
	@Autowired
	private IOrderService orderService;
	
	@Autowired
	private ICartService cartService;
	
	@GetMapping("/checkout")
	public String showOrderForm(
			Model model,
			@AuthenticationPrincipal Object principal,
			RedirectAttributes ra
			) {
		log.info("showOrderForm() 컨트롤러 호출!! 주문 페이지 진입!");
		
		MemberVO authMember = null;
		String username = null;

		// 1. 로그인 여부 확인 및 사용자 정보 추출
		if (principal instanceof CustomUser) {
			authMember = ((CustomUser) principal).getMemberVO();
		} else if (principal instanceof CustomOAuth2User) {
			authMember = ((CustomOAuth2User) principal).getMemberVO();
		}

		if (authMember != null) {
			username = authMember.getMemUsername();
		}

		if (username == null || username.isEmpty()) {
			log.warn("showOrderForm() - 비로그인 상태 접근 시도!");
			ra.addFlashAttribute("message", "로그인 후 주문할 수 있습니다.");
			return "redirect:/login"; // 로그인 페이지로 리다이렉트
		}
		
		model.addAttribute("isLoggedIn", true); // JSP 헤더에서 로그인 상태 표시용
		model.addAttribute("memberInfo", authMember); // JSP에서 배송지 정보 기본값 채우기용
		
		// 2. 주문할 상품 목록 가져오기 (장바구니에서 선택된 상품들)
				//    이 예시에서는 '모든' 장바구니 아이템을 가져온다고 가정합니다.
				//    만약 '선택된' 아이템만 가져와야 한다면, 클라이언트(장바구니 페이지)에서
				//    선택된 상품들의 goodsNo (또는 cartNo) 리스트를 쿼리 파라미터로 넘겨줘야 합니다.
				List<GoodsCartVO> cartItems = new ArrayList<>();
				try {
					cartItems = cartService.getCartItemsUsername(username); // 해당 유저의 모든 장바구니 아이템 조회

					// 장바구니 아이템에 추가 정보 (상품명, 이미지 등) 채우기
					if (cartItems != null && !cartItems.isEmpty()) {
						// cartService.getCartItemsUsername 메소드 안에서 상품 상세 정보를 이미 채워주고 있다고 가정합니다.
						// 만약 아니라면 여기서 goodsService를 사용하여 추가 정보를 채워야 합니다.
						// 예: for (GoodsCartVO item : cartItems) {
						//         goodsVO goods = goodsService.getGoodsDetail(item.getGoodsNo());
						//         if (goods != null) {
						//             item.setGoodsNm(goods.getGoodsNm());
						//             item.setRepresentativeImageUrl(goods.getRepresentativeImageUrl());
						//             // ... 기타 필요한 정보
						//         }
						//     }
					} else {
						log.warn("사용자 {}의 장바구니가 비어있습니다. 주문 페이지로 이동 불가.", username);
						ra.addFlashAttribute("message", "장바구니에 담긴 상품이 없습니다.");
						return "redirect:/goods/cart/list"; // 장바구니 페이지로 리다이렉트
					}
				} catch (Exception e) {
					log.error("주문 상품 목록 조회 중 오류 발생: {}", e.getMessage(), e);
					ra.addFlashAttribute("errorMessage", "주문할 상품 정보를 불러오는 데 실패했습니다.");
					return "redirect:/goods/cart/list"; // 오류 발생 시 장바구니 페이지로 리다이렉트
				}

				model.addAttribute("orderItems", cartItems); // JSP로 주문할 상품 목록 전달

				// 3. 뷰 반환
				return "goods/order";
	}
	
	/*
	 * @GetMapping("/checkoutSingle") public String showSingleItemOrderForm( Model
	 * model,
	 * 
	 * @RequestParam("goodsNo") int goodsNo,
	 * 
	 * @RequestParam(value = "goodsOptNo", required = false) Integer goodsOptNo,
	 * 
	 * @RequestParam(value = "qty", defaultValue = "1") int qty,
	 * 
	 * @AuthenticationPrincipal Object principal, RedirectAttributes ra ) {
	 * 
	 * log.info("showSingleItemOrderForm() 컨트롤러 호출!! 단품 주문 페이지 진입!!!");
	 * log.info("받은 파라미터 - goodsNo: {}, goodsOptNo: {}, qty: {}", goodsNo,
	 * goodsOptNo, qty);
	 * 
	 * }
	 */
	
	@PostMapping("/pay/ready")
	public ResponseEntity<Map<String, Object>> kakaoPayReady(
			@RequestBody Map<String, Object> payload, // 클라이언트로부터 받는 데이터
			@AuthenticationPrincipal Object principal) {

		Map<String, Object> response = new HashMap<>();
		MemberVO authMember = null;
		String username = null;
		int createdOrderNo = 0; // 예외 발생 시 롤백을 위해 createdOrderNo를 try 블록 밖에서 선언

		// === 로그인 처리 로직 ===
		if (principal instanceof CustomUser) {
			authMember = ((CustomUser) principal).getMemberVO();
		} else if (principal instanceof CustomOAuth2User) {
			authMember = ((CustomOAuth2User) principal).getMemberVO();
		}

		if (authMember != null) {
			username = authMember.getMemUsername();
		}

		if (username == null || username.isEmpty()) {
			response.put("status", "error");
			response.put("message", "로그인이 필요합니다.");
			return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED); // 401 Unauthorized
		}
		// === 로그인 처리 로직 끝 ===

		// --- 클라이언트에서 받은 결제 정보 추출 및 유효성 검사 ---
		// { "orderItems": [ { "goodsNo": 1, "goodsOptNo": 10, "qty": 2 }, ... ], "totalAmount": ...,
		//   "orderRecipientNm": "홍길동", "orderAddress1": "...", ... }
		List<Map<String, Object>> clientOrderItems = (List<Map<String, Object>>) payload.get("orderItems");
		Integer totalAmount = (Integer) payload.get("totalAmount");

		String goodsName = "굿즈 상품";
		if (clientOrderItems != null && !clientOrderItems.isEmpty()) {
			if (clientOrderItems.size() > 1) {
				goodsName += " 외 " + (clientOrderItems.size() - 1) + "건";
			} else {
				if (payload.containsKey("singleGoodsName")) {
					goodsName = (String) payload.get("singleGoodsName");
				}
			}
		} else {
			response.put("status", "error");
			response.put("message", "주문할 상품 정보가 없습니다.");
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}

		Integer totalQuantity = clientOrderItems.stream().mapToInt(item -> (Integer) item.getOrDefault("qty", 1)).sum();

		if (totalAmount == null || totalAmount <= 0 || totalQuantity <= 0) {
			response.put("status", "error");
			response.put("message", "결제 금액 또는 수량이 유효하지 않습니다.");
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}

		// --- 카카오페이 서비스 호출하여 결제 준비 요청 ---
		try {
			// 1. 주문 번호 생성 및 임시 주문 데이터 저장 (DB에 OrdersVO, OrderDetailVO 삽입)
			OrdersVO order = new OrdersVO();
			order.setMemUsername(username);
			order.setOrderTotalPrice(totalAmount);
			order.setOrderStatCode("결제 요청"); // 초기 주문 상태 (결제 준비 중)

			// OrdersVO의 다른 필수 필드 채우기 (클라이언트 payload에서 받거나 기본값 설정)
			// 실제로는 클라이언트의 주문/결제 페이지에서 받은 배송지 정보, 수령인 정보 등을 여기에 채웁니다.
			order.setOrderTypeCode("GOODS"); // 예시: '굿즈' 주문 유형 코드
			order.setOrderPayMethodNm("카카오페이"); // 결제 방법 명
			

			List<OrderDetailVO> orderDetails = new ArrayList<>();
			for (Map<String, Object> itemMap : clientOrderItems) {
				OrderDetailVO detail = new OrderDetailVO();
				detail.setGoodsNo((Integer) itemMap.get("goodsNo"));
				detail.setGoodsOptNo((Integer) itemMap.get("goodsOptNo"));
				detail.setOrderDetQty((Integer) itemMap.get("qty"));
				orderDetails.add(detail);
			}

			// OrderService를 통해 주문(OrdersVO)과 주문 상세(OrderDetailVO)를 DB에 저장
			// 이 메소드는 저장 후 order 객체에 생성된 orderNo를 채워주어야 합니다.
			orderService.createOrder(order, orderDetails); // void 반환
			createdOrderNo = order.getOrderNo(); // order 객체에 채워진 orderNo를 사용

			// 2. 카카오페이 ready API 호출
			Map<String, String> kakaoReadyResult = kakaoPayService.kakaoPayReady(goodsName, // 상품명
					totalAmount, // 총액
					totalQuantity, // 총 수량
					username, // 회원 ID
					String.valueOf(createdOrderNo) // 파트너 주문 ID (서비스의 주문 번호)
			);

			// 3. 결제 준비 응답 처리
			if (kakaoReadyResult != null && kakaoReadyResult.containsKey("next_redirect_pc_url")) {
				String tid = kakaoReadyResult.get("tid");
				String nextRedirectPcUrl = kakaoReadyResult.get("next_redirect_pc_url");

				// 결제 준비 정보를 PaymentVO에 저장 (DB에 PaymentVO 삽입)
				PaymentVO payment = new PaymentVO();
				payment.setTid(tid);
				payment.setOrderNo(createdOrderNo); // 생성된 주문 번호와 tid 매핑
				payment.setCid(kakaoPayService.getCid()); // IKakaoPayService에 getCid() 메소드 필요
				payment.setTotalAmount(totalAmount);
				payment.setPaymentStatCode("결제 요청"); // 결제 준비 상태
				// PaymentVO의 requestedAt은 SYSDATE로 DB에서 자동 입력될 수도 있습니다.
				orderService.savePaymentReadyInfo(payment); // PaymentVO를 DB에 저장

				response.put("status", "success");
				response.put("message", "카카오페이 결제 준비가 완료되었습니다.");
				response.put("next_redirect_pc_url", nextRedirectPcUrl);
				return new ResponseEntity<>(response, HttpStatus.OK);
			} else {
				// 카카오페이 응답 형식 오류 또는 필수 정보 누락 시
				log.error("카카오페이 결제 준비 응답에 필수 정보 누락: {}", kakaoReadyResult);
				// 오류 발생 시 생성된 주문을 취소하거나 상태를 '실패'로 변경하는 롤백 로직
				orderService.updateOrderStatus(createdOrderNo, "결제 준비 실패");
				response.put("status", "error");
				response.put("message", "카카오페이 결제 준비 중 오류가 발생했습니다.");
				return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}
		} catch (Exception e) {
			log.error("카카오페이 결제 준비 중 서버 오류 발생: {}", e.getMessage(), e);
			// 중요한 오류 발생 시 생성된 주문을 롤백
			if (createdOrderNo > 0) { // orderNo가 유효하게 생성된 경우에만 롤백 시도
				try {
					orderService.updateOrderStatus(createdOrderNo, "결제 오류");
				} catch (Exception rollbackE) {
					log.error("주문 {} 상태 업데이트 중 롤백 오류 발생: {}", createdOrderNo, rollbackE.getMessage());
				}
			}
			response.put("status", "error");
			response.put("message", "결제 시스템 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}