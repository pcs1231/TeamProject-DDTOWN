<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="jakarta.tags.core" prefix="c" %>
<%@ taglib uri="jakarta.tags.fmt" prefix="fmt" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DDTOWN 직원 포털 - 멤버십 관리</title>
    <%@ include file="../../../modules/headerPart.jsp" %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" >
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .membership-header-bar { display: flex; align-items: center; justify-content: space-between; margin-bottom: 18px; }
        .membership-header-bar .membership-title { font-size: 1.5em; font-weight: 700; color: #234aad; display: flex; align-items: center; gap: 10px; }
        .membership-header-bar .membership-title .management-info { font-size: 0.8em; font-weight: 500; color: #555; display: flex; align-items: center; gap: 4px; }
        .membership-header-bar .membership-title .management-info .fas { font-size: 0.85em; color: #234aad; }
        .membership-search-bar { display: flex; align-items: center; gap: 10px; margin-bottom: 18px; }
        .membership-search-bar select, 
        .membership-search-bar input[type="text"],
        .membership-search-bar button { padding: 7px 10px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em; height: 38px; box-sizing: border-box; }
        .membership-search-bar select { width: auto; min-width: 120px; max-width: 180px; -webkit-appearance: none; -moz-appearance: none; appearance: none;         /* Standard */
        background-image: url('data:image/svg+xml;utf8,<svg fill="%234A4A4A" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>');
        background-repeat: no-repeat; background-position: right 8px center; background-size: 16px; padding-right: 28px; }
    	.membership-search-bar input[type="text"] { flex-grow: 1; min-width: 180px; }
        .membership-search-bar button { background: #1976d2; color: #fff; border: none; cursor: pointer; }
        .membership-info-box { background: #fff; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); padding: 24px 30px 18px 30px; margin-bottom: 24px; }
        .membership-info-row { display: flex; align-items: center; gap: 32px; margin-bottom: 18px; }
        .membership-info-row .artist-name { font-size: 1.2em; font-weight: 600; color: #234aad; margin-right: 18px; }
        .membership-info-row .info-label { color: #888; font-size: 0.98em; margin-right: 6px; }
        .membership-info-row .info-value { font-size: 1.1em; font-weight: 600; margin-right: 18px; }
        .membership-chart-box { background: #fff; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); padding: 18px 18px 8px 18px; }
        .membership-chart-title { font-size: 1.1em; font-weight: 600; margin-bottom: 8px; color: #234aad; }
    	.status-badge { display: inline-block; padding: 4px 8px; border-radius: 12px; font-size: 0.85em; font-weight: 600; color: #fff; text-align: center; min-width: 50px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);}
    	.status-badge.active {background-color: #28a745;}
    	.status-badge.expired {background-color: #ffc107; color: #333;}
    	.status-badge.canceled {background-color: #dc3545;}
    </style>
</head>
<body>
    <div class="emp-container">
        <%@ include file="../../modules/header.jsp" %>
        <div class="emp-body-wrapper">
            <%@ include file="../../modules/aside.jsp" %>
            <main class="emp-content" style="position:relative; min-height:600px;">
                <div class="membership-header-bar">
                    <div class="membership-title">멤버십 구독자 현황
                    <span class="management-info">
                    	<c:choose>
                    		<c:when test="${not empty pagingVO.dataList }"> <i class="fas fa-user-tie"></i>
                    			<span>담당 아티스트 : ${pagingVO.dataList[0].artGroupNm }</span>
                    		</c:when>
                    		<c:otherwise>
                    			<i class="fas fa-info-circle" style="margin-right: 5px; color: #888;"></i>
                    			<span>담당 아티스트가 없습니다.</span>
                    		</c:otherwise>
                    	</c:choose>
                    </span>
                    </div>
                
                	<div class="membership-search-bar">
                      <form class="input-group input-group-sm" method="get" id="searchForm" onchange="this.form.submit();">
                      	<input type="hidden" name="currentPage" value="1" id="currentPage">
                        <select id="mbspSubStatCode" name="mbspSubStatCode" class="ea-filter-select">
                        	<option value="">-- 구독 상태 선택 --</option>
                        	<option value="MSSC001" <c:if test="${mbspSubStatCode eq 'MSSC001'}">selected</c:if>>구독중</option>
						    <option value="MSSC002" <c:if test="${mbspSubStatCode eq 'MSSC002'}">selected</c:if>>만료</option>
						    <option value="MSSC003" <c:if test="${mbspSubStatCode eq 'MSSC003'}">selected</c:if>>취소</option>
                        </select>
                        <input type="text" id="searchWord" name="searchWord" value="${pagingVO.searchWord }" class="ea-search-input" placeholder="구독자 아이디를 입력해주세요.">
                        <div class="input-group-append">
							<button type="submit" class="ea-btn primary">
								<i class="fas fa-search"></i>검색
							</button>
						</div>
                      </form>
                	</div>
                </div>
                <hr/>
                <table class="ea-table" id="membershipSubTable">
                	<thead>
                		<tr>
                			<th>번호</th>
	                		<th>구독상태</th>
	                		<th>멤버십명</th>
	                		<th>아티스트명</th>
	                		<th>구독자 아이디</th>
	                		<th>가입일시</th>
                		</tr>
                	</thead>
                	<tbody id="membershipSubTablebody">
                		<c:if test="${empty pagingVO.dataList }">
                			<tr>
                				<td colspan="5" class="text-center">멤버십에 가입된 유저가 없습니다.</td>
                			</tr>
                		</c:if>
                		<c:forEach var="sub" items="${pagingVO.dataList }" varStatus="status">
                			<tr>
                				<td class="text-center"><c:out value="${sub.mbspSubNo}" /></td>
                				<td class="text-center">
                					<c:choose>
                						<c:when test="${sub.mbspSubStatCode eq 'MSSC001' }">
                							<span class="status-badge active">구독중</span>
                						</c:when>
                						<c:when test="${sub.mbspSubStatCode eq 'MSSC002' }">
                							<span class="status-badge expired">만료</span>
                						</c:when>
                						<c:when test="${sub.mbspSubStatCode eq 'MSSC003' }">
                							<span class="status-badge canceled">취소</span>
                						</c:when>
                						<c:otherwise>${sub.mbspSubStatCode }</c:otherwise>
                					</c:choose>
                				</td>
                				<td class="text-center"><i class="fa-solid fa-gem" style="margin-right: 8px; color: #63DEFD;"></i><strong><c:out value="${sub.mbspNm}" /></strong></td>
                				<td class="text-center"><c:out value="${sub.artGroupNm}" /></td>
                				<td class="text-center"><c:out value="${sub.memUsername}" /></td>
                				<td class="text-center"><fmt:formatDate value="${sub.mbspSubStartDate}" pattern="yyyy-MM-dd" /></td>
                			</tr>
                		</c:forEach>
                	</tbody>
                </table>
                <div class="pagination-container" id="pagingArea">
		             ${pagingVO.pagingHTML}
			    </div>
            </main>
        </div>
    </div>
</body>
<script>
        // 로그아웃 기능
        const logoutButton = document.querySelector('.emp-logout-btn');
        if (logoutButton) {
            logoutButton.addEventListener('click', function(e) {
                e.preventDefault();
                if (confirm('로그아웃 하시겠습니까?')) {
                    alert('로그아웃 되었습니다.');
                }
            });
        }
    
        // 직원 이름 등 동적 데이터 로드 (예시)
        const employeeNameSpan = document.getElementById('employee-name');
        if (employeeNameSpan) {
            employeeNameSpan.textContent = "홍길동";
        }
        
    	$(function(){
    	    const pagingArea = $('#pagingArea');
    	    const searchForm = $('#searchForm'); 

    	    if(pagingArea.length > 0) {
    	        pagingArea.on('click', 'a', function(event) { 
    	            event.preventDefault();
    	            const page = $(this).data('page'); // data-page 속성에서 클릭된 페이지 번호 가져옴
    	            
    	            // 검색폼의 현재 searchWord 값을 가져옴
    	            const mbspSubStatCode = searchForm.find('select[name="mbspSubStatCode"]').val();
    	            const searchWord = searchForm.find('input[name="searchWord"]').val();

    	            // 페이지 이동을 위한 URL
    	            let targetPageUrl = '${pageContext.request.contextPath}/emp/membership/sub/list?currentPage=' + page;
    	            
    	            if(mbspSubStatCode) {
    	            	targetPageUrl += '&mbspSubStatCode=' + encodeURIComponent(mbspSubStatCode);
    	            }

    	            
    	            if (searchWord && searchWord.trim() !== '') {
    	                targetPageUrl += '&searchWord=' + encodeURIComponent(searchWord);
    	            }
    	            console.log("페이지네이션 클릭: " + targetPageUrl);
    	            window.location.href = targetPageUrl;
    	        });
    	    }
    	});
        
        // 드롭다운 변경 시 검색 폼 제출
        document.addEventListener('DOMContentLoaded', function() {
        	const statusFilter = document.getElementById('mbspSubStatCode');
        	const searchForm = document.getElementById('searchForm');
        	const hiddenPageInput = document.getElementById('currentPage');
        	
        	if(statusFilter) {
        		statusFilter.addEventListener('change', function() {
        			hiddenPageInput.value = 1;
        			searchForm.submit();	// 드롭다운 변경 시 바로 폼 제출
        		});
        	}
        	
        	// 검색 버튼 클릭 시 (기존 검색 폼 유지)
            searchForm.addEventListener('submit', function(e) {
                hiddenPageInput.value = 1; // 검색 시 1페이지로 이동
            });
        });
    
        // DOMContentLoaded 이벤트 내에서 사이드바 관련 스크립트 및 초기 차트 렌더링 실행
        document.addEventListener('DOMContentLoaded', function() {
            // 사이드바 메뉴 토글 기능
            const navItemsWithSubmenu = document.querySelectorAll('.emp-sidebar .emp-nav-item.has-submenu');
            navItemsWithSubmenu.forEach(item => {
                const arrow = item.querySelector('.submenu-arrow');
                item.addEventListener('click', function(event) {
                    if (this.getAttribute('href') === '#') {
                        event.preventDefault();
                    }
                    const parentLi = this.parentElement;
                    const submenu = this.nextElementSibling;
    
                    if (submenu && submenu.classList.contains('emp-submenu')) {
                        const parentUl = parentLi.parentElement;
                        if (parentUl) {
                            Array.from(parentUl.children).forEach(siblingLi => {
                                if (siblingLi !== parentLi) {
                                    const siblingSubmenuControl = siblingLi.querySelector('.emp-nav-item.has-submenu.open');
                                    if (siblingSubmenuControl) {
                                        const siblingSubmenuElement = siblingSubmenuControl.nextElementSibling;
                                        siblingSubmenuControl.classList.remove('open');
                                        if (siblingSubmenuElement && siblingSubmenuElement.classList.contains('emp-submenu')) {
                                            siblingSubmenuElement.style.display = 'none';
                                        }
                                        const siblingArrow = siblingSubmenuControl.querySelector('.submenu-arrow');
                                        if (siblingArrow) siblingArrow.style.transform = 'rotate(0deg)';
                                    }
                                }
                            });
                        }
                    }
                    
                    this.classList.toggle('open');
                    if (submenu && submenu.classList.contains('emp-submenu')) {
                        submenu.style.display = this.classList.contains('open') ? 'block' : 'none';
                        if (arrow) arrow.style.transform = this.classList.contains('open') ? 'rotate(90deg)' : 'rotate(0deg)';
                    }
                });
            });
    
            // 현재 페이지 URL 기반으로 사이드바 메뉴 활성화 및 펼침
            const currentFullHref = window.location.href;
            document.querySelectorAll('.emp-sidebar .emp-nav-item[href]').forEach(link => {
                const linkHrefAttribute = link.getAttribute('href');
                if (linkHrefAttribute && linkHrefAttribute !== "#" && currentFullHref.endsWith(linkHrefAttribute)) {
                    link.classList.add('active');
                    let currentActiveElement = link;
                    while (true) {
                        const parentLi = currentActiveElement.parentElement;
                        if (!parentLi) break;
                        const parentSubmenuUl = parentLi.closest('ul.emp-submenu');
                        if (parentSubmenuUl) {
                            parentSubmenuUl.style.display = 'block';
                            const controllingAnchor = parentSubmenuUl.previousElementSibling;
                            if (controllingAnchor && controllingAnchor.tagName === 'A' && controllingAnchor.classList.contains('has-submenu')) {
                                controllingAnchor.classList.add('active', 'open');
                                const arrow = controllingAnchor.querySelector('.submenu-arrow');
                                if (arrow) arrow.style.transform = 'rotate(90deg)';
                                currentActiveElement = controllingAnchor;
                            } else { break; }
                        } else { break; }
                    }
                }
            });
        });
    </script>
</html> 