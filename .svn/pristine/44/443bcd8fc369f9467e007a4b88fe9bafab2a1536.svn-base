package kr.or.ddit.ddtown.controller.emp.concert;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.alert.IAlertService;
import kr.or.ddit.ddtown.service.concert.IConcertService;
import kr.or.ddit.ddtown.service.concert.ISeatService;
import kr.or.ddit.ddtown.service.emp.artist.IArtistGroupService;
import kr.or.ddit.ddtown.service.follow.IFollowService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.alert.AlertVO;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.concert.ConcertVO;
import kr.or.ddit.vo.security.CustomUser;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/emp/concert/schedule")
public class EmpConcertScheduleController {

	@Autowired
	private IConcertService concertService;

	@Autowired
	private IAlertService alertService;

	@Autowired
	private IArtistGroupService artistGroupService;

	@Autowired
	private ISeatService seatService;

	@Autowired
	private IFollowService followService; 
	
	/**
	 * 현재 로그인한 사용자 (empUsername) 가져오는 메소드
	 */
	private String getCurrentEmpUsername() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if(authentication != null && authentication.getPrincipal() instanceof CustomUser) {
			CustomUser customUser = (CustomUser) authentication.getPrincipal();
			if(customUser.getEmployeeVO() != null) {
				return customUser.getEmployeeVO().getEmpUsername();
			}
		}
		return null;
	}

	/**
	 * @param concertVO
	 * @param model
	 * @return 콘서트 일정 목록 페이지
	 */
	@GetMapping("/list")
	public String scheduleList(
			@ModelAttribute("pagingVO") PaginationInfoVO<ConcertVO> pagingVO,
            Model model) {
		log.info("scheduleList() 실행...!");


        // currentPage가 넘어오지 않았을 경우 기본값 1을 설정
        if (pagingVO.getCurrentPage() == 0) {
            pagingVO.setCurrentPage(1);
        }

		try {
			log.debug("서비스 호출 전 pagingVO: {}", pagingVO);
			// 현재 페이지 전달 후, start/endRow, start/endPage 설정
			int totalRecord = concertService.selectConcertCount(pagingVO);
			pagingVO.setTotalRecord(totalRecord);

			List<ConcertVO> dataList = concertService.selectConcertList(pagingVO);
			pagingVO.setDataList(dataList);

			log.debug("PagingVO 결과: totalRecord={}, totalPage={}, dataList size={}",
	                pagingVO.getTotalRecord(), pagingVO.getTotalPage(), (dataList != null ? dataList.size() : 0));
		} catch (Exception e) {
			e.printStackTrace();
			model.addAttribute("errorMessage", "콘서트 목록을 불러오는 중 오류가 발생했습니다!!");
		}

		model.addAttribute("pagingVO", pagingVO);
		return "emp/concert/schedule/list";
	}

	/**
	 * @param concertNo
	 * @param model
	 * @param ra
	 * @return 콘서트 상세보기 페이지
	 */
	@GetMapping("/detail/{concertNo}")
	public String scheduleDetail(@PathVariable int concertNo, Model model, RedirectAttributes ra,
			@RequestParam(name = "searchType", required = false) String searchType,
            @RequestParam(name = "searchWord", required = false) String searchWord,
            @RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage) {
		log.info("scheduleDetail() 실행...! concertNo: {}, searchType: {}, searchWord: {}, page: {}", concertNo, searchType, searchWord, currentPage);

		try {
			ConcertVO concertVO = concertService.selectSchedule(concertNo);
			if(concertVO == null) {
				ra.addFlashAttribute("errorMessage", "해당되는 콘서트 정보 없ㄹ음");
				addSearchParamsToRedirectAttributes(ra, searchType, searchWord, currentPage);
				return "redirect:/emp/concert/schedule/list";
			}
			model.addAttribute("concertVO", concertVO);

			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("currentPage", currentPage);

		} catch (Exception e) {
			e.printStackTrace();
			ra.addFlashAttribute("errorMessage", "콘서트 일정 정보 불러오는중 오류 발생");
			addSearchParamsToRedirectAttributes(ra, searchType, searchWord, currentPage);
			return "redirect:/emp/concert/schedule/list";
		}
		return "emp/concert/schedule/detail";
	}


	/**
	 * @param model
	 * @return 콘서트 등록 페이지
	 */
	@GetMapping("/form")
	public String scheduleRegisterForm(Model model,
			@RequestParam(name = "searchType", required = false) String searchType,
            @RequestParam(name = "searchWord", required = false) String searchWord,
            @RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage) {

		log.info("scheduleRegisterForm() 실행...!");

		List<ArtistGroupVO> artistGroups = artistGroupService.selectAllArtistGroups();
		model.addAttribute("artistGroups", artistGroups);

		model.addAttribute("concertVO", new ConcertVO());

		model.addAttribute("searchType", searchType);
		model.addAttribute("searchWord", searchWord);
		model.addAttribute("currentPage", currentPage);

		return "emp/concert/schedule/form";
	}


	/**
	 * @param concertVO
	 * @param ra
	 * @param model
	 * @return 콘서트 일정 등록 처리
	 */
	@PostMapping("/insert")
	public String scheduleInsert(
			@ModelAttribute ConcertVO concertVO,
			RedirectAttributes ra,
			Model model,
			@RequestParam(name = "searchType", required = false) String searchType,
            @RequestParam(name = "searchWord", required = false) String searchWord,
            @RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage
			) {

		String currentEmployee = getCurrentEmpUsername();

		log.info("scheduleInsert() 실행...!");
		String goPage = "";
		// 유효성검사
		if(StringUtils.isBlank(concertVO.getConcertNm())) {
			model.addAttribute("errorMessage", "콘서트 제목을 입력해주세요!!");
			model.addAttribute("concertVO", concertVO);
			model.addAttribute("searchType", searchType);
            model.addAttribute("searchWord", searchWord);
            model.addAttribute("currentPage", currentPage);
			return "emp/concert/schedule/form";
		}

		if (concertVO.getArtGroupNo() <= 0) {
            model.addAttribute("errorMessage", "아티스트 그룹을 선택해주세요!!");
            model.addAttribute("concertVO", concertVO);

            List<ArtistGroupVO> artistGroups = artistGroupService.selectAllArtistGroups();
            model.addAttribute("artistGroups", artistGroups);
            return "emp/concert/schedule/form";
        }

		try {
			ServiceResult result = concertService.insertSchedule(concertVO, currentEmployee);

			if(result.equals(ServiceResult.OK) && concertVO.getConcertNo() > 0) {
				ra.addFlashAttribute("successMessage", "콘서트 일정 등록 성공!!");
				addSearchParamsToRedirectAttributes(ra, searchType, searchWord, currentPage);
			    goPage = "redirect:/emp/concert/schedule/detail/" + concertVO.getConcertNo();
			    log.info("등록 후 리다이렉트 URL : {}", goPage);

			    ConcertVO newConcertInfo = concertService.selectSchedule(concertVO.getConcertNo());
			    String artGroupName = (newConcertInfo != null) ? newConcertInfo.getArtGroupName() : "(알 수 없는 아티스트)";

			    AlertVO alert = new AlertVO();
			    alert.setAlertTypeCode("ATC007");		// 공통코드 유형 (새로운 콘서트 일정)
			    alert.setRelatedItemTypeCode("ITC007");	// 관련 유형코드 (콘서트 일정)

			    // 알림 동적으로 생성하기위해서 객체 생성하기
			    String alertMessage = "팔로우 하신 아티스트'" + artGroupName +  "'의 새로운 콘서트 '" + concertVO.getConcertNm() + "' 일정이 등록되었습니다!!";
			    alert.setAlertContent(alertMessage);

			    // 알림 클릭시 이동할 URL 설정
			    alert.setAlertUrl("/emp/concert/schedule/detail/" + concertVO.getConcertNo());

			    // 알림, 관련된 대상의 id 저장 ( long타입으로 변경 )
			    alert.setRelatedItemNo(Long.valueOf(concertVO.getConcertNo()));

			    // 알림, 관련된 대상의 문자열 저장, 이후 각 게시판, 알림지정된곳마다 넣어주는거 잊지말기
			    alert.setRelatedItemChar("CONCERT_NO");


			    // 알림 받을 수신자 설정 ( 각 게시물마다 팔로우서비스 이용해서 조회 )
			    List<String> recipientUsernames = new ArrayList<>();

//			    recipientUsernames.add("user06");		// 테스트용
//			    recipientUsernames.add("user01");		// 테스트용
			    
			    try {
					int artGroupNo = concertVO.getArtGroupNo();
					if(artGroupNo > 0) {
						recipientUsernames = followService.getFollowerUsernamesForAlert(artGroupNo);
					}
				} catch (Exception e) {
					log.error("팔로워 사용자 목록 조회 중 오류 발생!!", e);
				}

			    if(!recipientUsernames.isEmpty()) {
			    	try {
						alertService.createAlert(alert, recipientUsernames);
						log.info("새로운 콘서트 일정 알림 생성 및 발송 요청 완료. 대상자: {}", recipientUsernames);
					} catch (Exception e) {
						log.error("콘서트 일정 등록 후 알림 생성/발송중 오류 발생", e);
					}
			    } else {
			    	log.info("새로운 콘서트 일정 알림 대상자가 없습니다");
			    }
			} else {
				model.addAttribute("errorMessage", "콘서트 일정 등록 실패!!");
				model.addAttribute("concertVO", concertVO);
				model.addAttribute("searchType", searchType);
				model.addAttribute("searchWord", searchWord);
				model.addAttribute("currentPage", currentPage);
				goPage = "emp/concert/schedule/form";
			}
		} catch (Exception e) {
			e.printStackTrace();
			model.addAttribute("errorMessage", "시스템오류, 콘서트 일정 등록 실패!!");
			model.addAttribute("concertVO", concertVO);
			goPage = "emp/concert/schedule/form";
		}

		return goPage;
	}


	/**
	 * @param concertNo
	 * @param model
	 * @param ra
	 * @return 콘서트 일정 수정 폼
	 */
	@GetMapping("/mod/{concertNo}")
	public String scheduleModForm(@PathVariable int concertNo, Model model, RedirectAttributes ra,
			@RequestParam(name = "searchType", required = false) String searchType,
            @RequestParam(name = "searchWord", required = false) String searchWord,
            @RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage) {
		log.info("scheduleModForm() 실행...!");



		try {
			ConcertVO concertVO = concertService.selectSchedule(concertNo);
			if(concertVO == null) {
				ra.addFlashAttribute("errorMessage", "수정할 콘서트 일정 찾을수 없음");
				return "redirect:/emp/concert/schedule/list";
			}

			model.addAttribute("concertVO", concertVO);
			model.addAttribute("searchType", searchType);
            model.addAttribute("searchWord", searchWord);
            model.addAttribute("currentPage", currentPage);

		} catch (Exception e) {
			e.printStackTrace();
			ra.addFlashAttribute("errorMessage", "콘서트 일정 불러오는중 오류발생");
			return "redirect:/emp/concert/schedule/list";
		}

		return "emp/concert/schedule/mod";
	}

	/**
	 * @param concertNo
	 * @param concertVO
	 * @param ra
	 * @param model
	 * @return 콘서트 일정 수정 처리
	 */
	@PostMapping("/mod/{concertNo}")
	public String scheduleMod(
			@PathVariable int concertNo,
			@ModelAttribute ConcertVO concertVO,
			RedirectAttributes ra,
			Model model,
			@RequestParam(name = "searchType", required = false) String searchType,
            @RequestParam(name = "searchWord", required = false) String searchWord,
            @RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage
			) {
		log.info("scheduleMod() 실행...!");
		String goPage = "";

		concertVO.setConcertNo(concertNo);

		if (concertVO.getArtGroupNo() <= 0) {
	        model.addAttribute("errorMessage", "아티스트 그룹 정보가 유효하지 않습니다. 다시 시도해주세요."); 
	        model.addAttribute("concertVO", concertVO); // 기존 데이터 유지를 위해 다시 모델에 추가
	        // artistGroups도 다시 모델에 추가하여 드롭다운 노ㅓ출
	        List<ArtistGroupVO> artistGroups = artistGroupService.selectAllArtistGroups();
	        model.addAttribute("artistGroups", artistGroups);
	        model.addAttribute("searchType", searchType);
	        model.addAttribute("searchWord", searchWord);
	        model.addAttribute("currentPage", currentPage);
	        return "emp/concert/schedule/mod"; 
	    }
		
		if(StringUtils.isBlank(concertVO.getConcertNm())) {
			model.addAttribute("errorMessage", "콘서트 제목을 입력해주세요!!");
			model.addAttribute("concertVO", concertVO);
			model.addAttribute("searchType", searchType);
            model.addAttribute("searchWord", searchWord);
            model.addAttribute("currentPage", currentPage);
			return "emp/concert/schedule/mod";
		}

		
		try {
			ServiceResult result = concertService.updateSchedule(concertVO);
			if(result.equals(ServiceResult.OK)) {
				ra.addFlashAttribute("successMessage", "콘서트 일정 수정 성공!!");
				addSearchParamsToRedirectAttributes(ra, searchType, searchWord, currentPage);
				goPage = "redirect:/emp/concert/schedule/detail/" + concertNo;
			} else {
				ra.addFlashAttribute("errorMessage", "콘서트 일정 수정 실패!!");
				model.addAttribute("concertVO", concertVO);
				model.addAttribute("searchType", searchType);
	            model.addAttribute("searchWord", searchWord);
	            model.addAttribute("currentPage", currentPage);
				goPage = "emp/concert/schedule/mod";
			}

		} catch (Exception e) {
			e.printStackTrace();
			ra.addFlashAttribute("errorMessage", "시스템오류, 콘서트 일정 수정 실패!!");
			model.addAttribute("concertVO", concertVO);
			goPage = "emp/concert/schedule/mod";
		}
		return goPage;
	}

	/**
	 * @param concertNo
	 * @param ra
	 * @return 콘서트 일정 삭제 처리 -> 콘서트 일정 목록 페이지
	 */
	@PostMapping("/delete/{concertNo}")
	public String scheduleDelete(@PathVariable int concertNo, RedirectAttributes ra,
			@RequestParam(name = "searchType", required = false) String searchType,
            @RequestParam(name = "searchWord", required = false) String searchWord,
            @RequestParam(name = "currentPage", required = false, defaultValue = "1") int currentPage) {
		log.info("scheduleDelete() 실행...!");

		try {
			ServiceResult result = concertService.deleteSchedule(concertNo);
			if(result.equals(ServiceResult.OK)) {
				ra.addFlashAttribute("successMessage", "콘서트 일정 삭제 성공!!");
			} else {
				ra.addFlashAttribute("errorMessage", "콘서트 일정 삭제 실패!!");
			}

		} catch (Exception e) {
			e.printStackTrace();
			ra.addFlashAttribute("errorMessage", "시스템오류, 콘서트 일정 삭제 실패!!");
		}
		addSearchParamsToRedirectAttributes(ra, searchType, searchWord, currentPage);
		return "redirect:/emp/concert/schedule/list";
	}

	private void addSearchParamsToRedirectAttributes(RedirectAttributes ra, String searchType, String searchWord,
			int currentPage) {
		if (StringUtils.isNotBlank(searchType)) {
            ra.addAttribute("searchType", searchType);
        }
        if (StringUtils.isNotBlank(searchWord)) {
            ra.addAttribute("searchWord", searchWord);
        }
        if (currentPage > 1) { // 1페이지는 기본값이므로 굳이 안넘겨도 됨
            ra.addAttribute("currentPage", currentPage);
        }

	}
}
