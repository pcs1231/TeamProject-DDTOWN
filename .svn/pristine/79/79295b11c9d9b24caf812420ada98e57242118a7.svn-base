<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>콘서트 좌석 관리 - DDTOWN 직원 포털</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <%@ include file="../../modules/headerPart.jsp" %>
    <style>
        .seat-header-bar { display: flex; align-items: center; justify-content: space-between; margin-bottom: 18px; }
        .seat-header-bar .seat-title { font-size: 1.5em; font-weight: 700; color: #234aad; }
        .seat-header-bar .seat-add-btn { background: #1976d2; color: #fff; border: none; border-radius: 5px; padding: 8px 22px; font-size: 1em; font-weight: 500; cursor: pointer; transition: background 0.2s; }
        .seat-header-bar .seat-add-btn:hover { background: #1451a3; }
        .concert-select-bar { display: flex; align-items: center; gap: 10px; margin-bottom: 18px; }
        .concert-select-bar select { padding: 7px 10px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em; min-width: 200px; }
        .seat-table { width: 100%; border-collapse: collapse; background: #fff; margin-bottom: 18px; }
        .seat-table th, .seat-table td { border: 1px solid #e0e0e0; padding: 10px; text-align: center; }
        .seat-table th { background: #f5f5f5; font-weight: 600; }
        .seat-table td .btn { padding: 5px 14px; border-radius: 5px; font-size: 0.98em; cursor: pointer; border: none; margin: 0 2px; }
        .seat-table td .btn-edit { background: #1976d2; color: #fff; }
        .seat-table td .btn-delete { background: #e74c3c; color: #fff; }
        .seat-table td .btn-edit:hover { opacity: 0.85; }
        .seat-table td .btn-delete:hover { background: #c0392b; }
        .modal { position: fixed; z-index: 1000; left: 0; top: 0; width: 100vw; height: 100vh; overflow: auto; background: rgba(0,0,0,0.35); display: flex; align-items: center; justify-content: center; }
        .modal-content { background: #fff; padding: 30px 30px 20px 30px; border-radius: 10px; min-width: 340px; max-width: 95vw; box-shadow: 0 4px 24px rgba(0,0,0,0.18); position: relative; }
        .modal-content h2 { margin-top: 0; }
        .close { position: absolute; right: 18px; top: 12px; font-size: 2em; color: #888; cursor: pointer; }
        .modal-content label { font-weight: 500; }
        .modal-content input, .modal-content select { width: 100%; margin-top: 4px; margin-bottom: 8px; padding: 7px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em; }
        .modal-content .modal-btn-row { display: flex; justify-content: flex-end; gap: 10px; margin-top: 18px; }
        .modal-content .modal-btn-row button { padding: 8px 22px; border: none; border-radius: 4px; font-size: 1em; cursor: pointer; }
        .modal-content .modal-btn-row .cancel-btn { background: #888; color: #fff; }
        .modal-content .modal-btn-row .save-btn { background: #1976d2; color: #fff; }
        .seat-map-container { margin-top: 30px; padding: 20px; background: #fff; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
        .seat-map-title { font-size: 1.2em; font-weight: 600; color: #234aad; margin-bottom: 15px; }
        .stage-area { text-align: center; margin-bottom: 20px; }
        .stage { display: inline-block; background: #444; color: #fff; padding: 8px 40px; border-radius: 6px; font-weight: 1200; letter-spacing: 2px; }
        .seat-map { display: flex; flex-direction: column; align-items: center; gap: 15px; }
        .seat-section { width: 100%; max-width: 800px; margin-bottom: 30px; background: #f8f9fa; border-radius: 8px; padding: 18px 0 10px 0; box-shadow: 0 1px 4px rgba(0,0,0,0.04); }
        .seat-section h4 { font-size: 1.1em; color: #234aad; margin-bottom: 12px; text-align: left; padding-left: 18px; }
        .seat-rows { display: flex; flex-direction: column; gap: 10px; align-items: flex-start; padding-left: 150px; }
        .seat-row { display: flex; flex-direction: row; gap: 8px; align-items: center; }
        .seat-label { width: 28px; display: flex; align-items: center; justify-content: center; font-size: 0.95em; color: #888; margin-right: 6px; margin-bottom: 0; }
        .seat { width: 32px; height: 32px; border-radius: 6px; border: 1.5px solid #bbb; background: #fff; color: #333; font-weight: 600; font-size: 0.9em; /* Slightly smaller font for two digits */ display: flex; align-items: center; justify-content: center; cursor: pointer; transition: box-shadow 0.15s; }
        .seat.available { background: #fff; }
        .seat.occupied { background: #e74c3c; color: #fff; cursor: not-allowed; }
        .seat-row + .seat-row { margin-top: 2px; }
        .seat-legend { display: flex; justify-content: flex-end; gap: 20px; margin-top: 20px; margin-right: 18px; }
        .legend-item { display: flex; align-items: center; gap: 5px; }
        .seat-sample { width: 20px; height: 20px; border-radius: 4px; border: 1px solid #bbb; }
        .seat-sample.available { background: #fff; }
        .seat-sample.occupied { background: #e74c3c; }
    </style>
</head>
<body>
    <div class="emp-container">
        <%@ include file="../modules/header.jsp" %>
        <div class="emp-body-wrapper">
            <%@ include file="../modules/aside.jsp" %>
            <main class="emp-content" style="position:relative; min-height:600px;">
                <div class="seat-header-bar">
                    <div class="seat-title">콘서트 좌석 관리</div>
                    <button class="seat-add-btn" id="addSeatBtn"><i class="fas fa-plus"></i> 새 등급/가격 추가</button>
                </div>
                <div class="concert-select-bar">
                    <select id="concertSelect">
                        <option value="">콘서트를 선택하세요</option>
                    </select>
                </div>
                <table class="seat-table" id="seatTable">
                    <thead>
                        <tr>
                            <th>좌석 등급</th>
                            <th>가격</th>
                            <th>좌석 수</th>
                            <th>관리</th>
                        </tr>
                    </thead>
                    <tbody id="seatTableBody">
                        </tbody>
                </table>
                <div class="seat-map-container" id="seatMapContainer" style="display: none;">
                    <div class="seat-map-title">좌석 현황</div>
                    <div class="stage-area">
                        <div class="stage">STAGE</div>
                    </div>
                    <div class="seat-map" id="seatMap">
                        </div>
                    <div class="seat-legend">
                        <div class="legend-item">
                            <div class="seat-sample available"></div>
                            <span>예매 가능</span>
                        </div>
                        <div class="legend-item">
                            <div class="seat-sample occupied"></div>
                            <span>예매 완료</span>
                        </div>
                    </div>
                </div>
            </main>
        </div>
        <footer class="emp-footer">
            <p>&copy; 2025 DDTOWN Entertainment. All rights reserved. (직원 전용)</p>
        </footer>
    </div>
   	
    <div id="seatModal" class="modal" style="display:none;">
        <div class="modal-content">
            <span class="close" id="closeSeatModal">&times;</span>
            <h2 id="seatModalTitle">새 좌석 등급/가격 추가</h2>
            <form id="seatForm">
                <label>좌석 등급 <span style="color:red;">*</span><br>
                    <input type="text" id="seatGrade" required>
                </label>
                <label>가격 <span style="color:red;">*</span><br>
                    <input type="number" id="seatPrice" required>
                </label>
                <label>좌석 수 <span style="color:red;">*</span><br>
                    <input type="number" id="seatCount" required>
                </label>
                <div class="modal-btn-row">
                    <button type="button" class="cancel-btn" id="seatCancelBtn">취소</button>
                    <button type="submit" class="save-btn" id="seatSaveBtn">저장</button>
                </div>
            </form>
        </div>
    </div>
    <script>
        // 로그아웃, 사이드바, 직원명 등 emp_portal.html과 동일
        const logoutButton = document.querySelector('.emp-logout-btn');
        if (logoutButton) {
            logoutButton.addEventListener('click', function(e) {
                e.preventDefault();
                if (confirm('로그아웃 하시겠습니까?')) {
                    alert('로그아웃 되었습니다.');
                }
            });
        }
        const employeeNameSpan = document.getElementById('employee-name');
        if (employeeNameSpan) {
            employeeNameSpan.textContent = "홍길동";
        }
        document.addEventListener('DOMContentLoaded', function() {
            // 사이드바 메뉴 토글 및 활성화 로직 (emp_portal.html의 스크립트와 동일하게 유지)
            const navItemsWithSubmenu = document.querySelectorAll('.emp-sidebar .emp-nav-item.has-submenu');
            navItemsWithSubmenu.forEach(item => {
                const arrow = item.querySelector('.submenu-arrow');
                item.addEventListener('click', function(event) {
                    event.preventDefault();
                    const parentLi = this.parentElement;
                    const submenu = this.nextElementSibling;
                    if (submenu && submenu.classList.contains('emp-submenu')) {
                        const parentUl = parentLi.parentElement;
                        if (parentUl) {
                            Array.from(parentUl.children).forEach(siblingLi => {
                                if (siblingLi !== parentLi) {
                                    const siblingSubmenuControl = siblingLi.querySelector('.emp-nav-item.has-submenu.open');
                                    if (siblingSubmenuControl) {
                                        const siblingSubmenuElement = siblingSubmenuControl.nextElementSibling;
                                        siblingSubmenuControl.classList.remove('open');
                                        if (siblingSubmenuElement && siblingSubmenuElement.classList.contains('emp-submenu')) {
                                            siblingSubmenuElement.style.display = 'none';
                                        }
                                        const siblingArrow = siblingSubmenuControl.querySelector('.submenu-arrow');
                                        if (siblingArrow) siblingArrow.style.transform = 'rotate(0deg)';
                                    }
                                }
                            });
                        }
                    }
                    this.classList.toggle('open');
                    if (submenu && submenu.classList.contains('emp-submenu')) {
                        submenu.style.display = this.classList.contains('open') ? 'block' : 'none';
                        if (arrow) arrow.style.transform = this.classList.contains('open') ? 'rotate(90deg)' : 'rotate(0deg)';
                    }
                });
            });
            // URL 기반 사이드바 활성화 (emp_portal.html의 로직과 동일하게 적용)
            const currentFullHref = window.location.href;
            document.querySelectorAll('.emp-sidebar .emp-nav-item[href]').forEach(link => {
                const linkHrefAttribute = link.getAttribute('href');
                if (linkHrefAttribute && linkHrefAttribute !== "#" && currentFullHref.endsWith(linkHrefAttribute)) {
                    link.classList.add('active');
                    let currentActiveElement = link;
                    while (true) {
                        const parentLi = currentActiveElement.parentElement;
                        if (!parentLi) break;
                        const parentSubmenuUl = parentLi.closest('.emp-submenu');
                        if (parentSubmenuUl) {
                            parentSubmenuUl.style.display = 'block';
                            const controllingAnchor = parentSubmenuUl.previousElementSibling;
                            if (controllingAnchor && controllingAnchor.tagName === 'A' && controllingAnchor.classList.contains('has-submenu')) {
                                controllingAnchor.classList.add('active', 'open');
                                const arrowElement = controllingAnchor.querySelector('.submenu-arrow');
                                if (arrowElement) arrowElement.style.transform = 'rotate(90deg)';
                                currentActiveElement = controllingAnchor;
                            } else { break; }
                        } else { break; }
                    }
                }
            });
        });

        // 콘서트 샘플 데이터
        const concertList = [
            { id: 1, name: 'NCT WISH 1st Concert' },
            { id: 2, name: 'RIIZE Online Live' },
            { id: 3, name: 'LE SSERAFIM World Tour' }
        ];

        // 좌석 등급/가격 샘플 데이터
        let seatList = {
            1: [ // NCT WISH Concert
                { id: 1, grade: 'VIP', price: 180000, count: 25 }, // 예시: VIP 25석
                { id: 2, grade: 'R석', price: 150000, count: 38 },  // 예시: R석 38석
                { id: 3, grade: 'S석', price: 120000, count: 50 }
            ],
            2: [ // RIIZE Online Live
                { id: 1, grade: '온라인 티켓', price: 50000, count: 1000 }
            ],
            3: [ // LE SSERAFIM World Tour
                { id: 1, grade: 'Floor', price: 200000, count: 18 }, // 예시: Floor 18석
                { id: 2, grade: 'Balcony', price: 170000, count: 30 }
            ]
        };

        // 좌석 예매 현황 샘플 데이터 (seatId는 '등급소문자-열좌석번호' 형식, 예: 'vip-a1')
        let seatStatus = {
            1: { // NCT WISH Concert
                'vip-a1': 'occupied', 'vip-a2': 'occupied', 'vip-a3': 'available', 'vip-a4': 'occupied', 'vip-a5': 'available',
                'vip-b1': 'available', 'vip-b2': 'occupied', 'vip-b3': 'available', 'vip-b4': 'available', 'vip-b5': 'occupied',
                'r-a1': 'occupied', 'r-b2': 'available', 'r-c3': 'occupied', 'r-d4':'available', 'r-e10': 'occupied'
            },
            2: { /* 온라인 콘서트는 개별 좌석 현황이 필요 없을 수 있음 */ },
            3: { // LE SSERAFIM World Tour
                'floor-a1': 'occupied', 'floor-a2': 'available', 'floor-a3': 'occupied',
                'balcony-c5': 'occupied', 'balcony-d8': 'available'
            }
        };

        let editId = null;
        let currentConcertId = null;

        // 콘서트 선택 옵션 렌더링
        function renderConcertSelect() {
            const select = document.getElementById('concertSelect');
            select.innerHTML = '<option value="">콘서트를 선택하세요</option>';
            concertList.forEach(concert => {
                const option = document.createElement('option');
                option.value = concert.id;
                option.textContent = concert.name;
                select.appendChild(option);
            });
        }

        // 좌석 테이블 렌더링
        function renderSeatTable(concertId) {
            const tbody = document.getElementById('seatTableBody');
            tbody.innerHTML = '';
            
            if (!concertId || !seatList[concertId]) return;
            
            seatList[concertId].forEach(seat => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${seat.grade}</td>
                    <td>${seat.price.toLocaleString()}원</td>
                    <td>${seat.count}석</td>
                    <td>
                        <button class="btn btn-edit" onclick="editSeat(${seat.id})"><i class="fas fa-edit"></i> 수정</button>
                        <button class="btn btn-delete" onclick="deleteSeat(${seat.id})"><i class="fas fa-trash"></i> 삭제</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        // 좌석 맵 렌더링
        function renderSeatMap(concertId) {
            const seatMapContainer = document.getElementById('seatMapContainer');
            const seatMapDiv = document.getElementById('seatMap'); // seatMapDiv로 변경 (변수명 충돌 방지)
            
            if (!concertId || !seatList[concertId] || concertId === "") {
                seatMapContainer.style.display = 'none';
                return;
            }

            // 온라인 콘서트인 경우 좌석 맵을 표시하지 않음
            const isOnlineConcert = seatList[concertId].length === 1 && seatList[concertId][0].grade === '온라인 티켓';
            if (isOnlineConcert) {
                seatMapContainer.style.display = 'none';
                return;
            }

            seatMapContainer.style.display = 'block';
            seatMapDiv.innerHTML = ''; // 이전 좌석맵 클리어

            seatList[concertId].forEach(gradeInfo => {
                if (gradeInfo.grade === '온라인 티켓') return;

                const section = document.createElement('div');
                section.className = 'seat-section';
                section.innerHTML = `
                    <h4>${gradeInfo.grade} (\${gradeInfo.price.toLocaleString()}원) - 총 \${gradeInfo.count}석</h4>
                    <div class="seat-rows">
                        \${generateSeats(gradeInfo.grade, gradeInfo.count)}
                    </div>
                `;
                seatMapDiv.appendChild(section);
            });
        }

        // 수정된 좌석 HTML 생성 함수
        function generateSeats(gradeName, totalCount) {
            let seatsHtml = '';
            const rowLabels = ['A', 'B', 'C', 'D', 'E'];
            const seatsPerRow = 10;
            let generatedSeatsCount = 0; // 해당 등급에 대해 생성된 좌석 수

            for (let i = 0; i < rowLabels.length; i++) { // A열부터 E열까지
                if (generatedSeatsCount >= totalCount) break; // 해당 등급의 총 좌석 수를 넘으면 중단

                const currentRowLabel = rowLabels[i];
                let rowSeatsHtml = '';
                
                for (let seatNum = 1; seatNum <= seatsPerRow; seatNum++) { // 각 열의 1번부터 10번 좌석까지
                    if (generatedSeatsCount >= totalCount) break;

                    const seatId = `\${gradeName.toLowerCase()}-\${currentRowLabel}\${seatNum}`;
                    const status = seatStatus[currentConcertId]?.[seatId] || 'available'; // 예매 현황 데이터에서 상태 조회
                    
                    rowSeatsHtml += `<div class="seat \${status}" data-seat-id="\${seatId}">\${seatNum}</div>`;
                    generatedSeatsCount++;
                }

                if (rowSeatsHtml) { // 해당 열에 좌석이 생성된 경우에만 추가
                    seatsHtml += `<div class="seat-row"><span class="seat-label">\${currentRowLabel}</span>\${rowSeatsHtml}</div>`;
                }
            }
            return seatsHtml;
        }

        // 콘서트 선택 이벤트
        document.getElementById('concertSelect').addEventListener('change', function() {
            currentConcertId = this.value;
            renderSeatTable(currentConcertId);
            renderSeatMap(currentConcertId);
        });

        // 모달 관련 DOM 요소
        const seatModal = document.getElementById('seatModal');
        const seatModalTitle = document.getElementById('seatModalTitle');
        const seatForm = document.getElementById('seatForm');
        const seatGradeInput = document.getElementById('seatGrade');
        const seatPriceInput = document.getElementById('seatPrice');
        const seatCountInput = document.getElementById('seatCount');

        // '새 등급/가격 추가' 버튼 클릭
        document.getElementById('addSeatBtn').onclick = function() {
            if (!currentConcertId) {
                alert('콘서트를 먼저 선택해주세요.');
                return;
            }
            editId = null; // 새 등록이므로 editId 초기화
            seatModalTitle.textContent = '새 좌석 등급/가격 추가';
            seatForm.reset(); // 폼 초기화
            seatModal.style.display = 'flex';
        };

        // 모달 닫기 버튼 (취소, X)
        document.getElementById('seatCancelBtn').onclick = function() {
            seatModal.style.display = 'none';
        };
        document.getElementById('closeSeatModal').onclick = function() {
            seatModal.style.display = 'none';
        };

        // 좌석 정보 저장 (등록/수정)
        seatForm.onsubmit = function(e) {
            e.preventDefault();
            const grade = seatGradeInput.value.trim();
            const price = parseInt(seatPriceInput.value);
            const count = parseInt(seatCountInput.value);

            if (!grade || isNaN(price) || price <= 0 || isNaN(count) || count <= 0) {
                alert('모든 필수 항목을 올바르게 입력하세요. 가격과 좌석 수는 0보다 커야 합니다.');
                return;
            }
            if (!seatList[currentConcertId]) { // 혹시 모를 경우 대비
                seatList[currentConcertId] = [];
            }

            if (editId !== null) { // 수정 모드
                const index = seatList[currentConcertId].findIndex(s => s.id === editId);
                if (index > -1) {
                    seatList[currentConcertId][index] = { ...seatList[currentConcertId][index], grade, price, count };
                }
            } else { // 등록 모드
                const newId = seatList[currentConcertId].length > 0 ? 
                              Math.max(...seatList[currentConcertId].map(s => s.id)) + 1 : 1;
                seatList[currentConcertId].push({ id: newId, grade, price, count });
            }

            renderSeatTable(currentConcertId);
            renderSeatMap(currentConcertId); // 좌석맵도 업데이트
            seatModal.style.display = 'none';
            editId = null; // editId 초기화
        };

        // 수정 버튼 클릭 시
        window.editSeat = function(id) {
            if (!currentConcertId) return;
            const seatToEdit = seatList[currentConcertId].find(s => s.id === id);
            if (!seatToEdit) return;

            editId = id; // 수정할 좌석의 id 설정
            seatModalTitle.textContent = '좌석 등급/가격 수정';
            seatGradeInput.value = seatToEdit.grade;
            seatPriceInput.value = seatToEdit.price;
            seatCountInput.value = seatToEdit.count;
            seatModal.style.display = 'flex';
        };

        // 삭제 버튼 클릭 시
        window.deleteSeat = function(id) {
            if (!currentConcertId) return;
            if (confirm(`'\${seatList[currentConcertId].find(s=>s.id===id)?.grade || ''}' 등급 정보를 정말 삭제하시겠습니까?`)) {
                seatList[currentConcertId] = seatList[currentConcertId].filter(s => s.id !== id);
                renderSeatTable(currentConcertId);
                renderSeatMap(currentConcertId); // 좌석맵도 업데이트
            }
        };

        // 초기 콘서트 목록 렌더링
        renderConcertSelect();
    </script>
</body>
</html> 