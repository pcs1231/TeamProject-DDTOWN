package kr.or.ddit.ddtown.controller.order;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import kr.or.ddit.ddtown.service.goods.cart.ICartService;
import kr.or.ddit.ddtown.service.goods.order.IOrderService;
import kr.or.ddit.ddtown.service.kakaopay.IKakaoPayService;
import kr.or.ddit.dto.kakaopay.KakaoPayApproveResponseDTO;
import kr.or.ddit.vo.order.OrderDetailVO;
import kr.or.ddit.vo.order.OrdersVO;
import kr.or.ddit.vo.order.PaymentVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/goods/order")
public class OrderRestController {
	
	@Autowired
	private IKakaoPayService kakaoPayService;
	
	@Autowired
	private IOrderService orderService;
	
	@Autowired
	private ICartService cartService;
	
	
	 /**
     * 카카오페이 결제 준비 요청을 처리합니다.
     * 클라이언트(JSP의 JS)에서 Ajax POST 요청으로 호출됩니다.
     */
    @PostMapping("/pay/ready")
    public ResponseEntity<Map<String, Object>> kakaoPayReady(
            @RequestBody Map<String, Object> payload, // 클라이언트로부터 받는 데이터
            @AuthenticationPrincipal Object principal) {

        Map<String, Object> response = new HashMap<>();
        MemberVO authMember = null;
        String username = null;
        int createdOrderNo = 0; // 예외 발생 시 롤백을 위해 생성된 주문 번호 저장

        // --- 1. 로그인 여부 확인 및 사용자 정보 추출 ---
        if (principal instanceof CustomUser) {
            authMember = ((CustomUser) principal).getMemberVO();
        } else if (principal instanceof CustomOAuth2User) {
            authMember = ((CustomOAuth2User) principal).getMemberVO();
        }

        if (authMember != null) {
            username = authMember.getMemUsername();
        }

        if (username == null || username.isEmpty()) {
            response.put("status", "error");
            response.put("message", "로그인이 필요합니다.");
            return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
        }

        // --- 2. 클라이언트에서 받은 결제 정보 추출 및 서버 유효성 검사 (중요!) ---
        List<Map<String, Object>> clientOrderItems = (List<Map<String, Object>>) payload.get("orderItems");
        Integer totalAmount = (Integer) payload.get("totalAmount"); // 클라이언트에서 받은 총 금액
        String singleGoodsName = (String) payload.get("singleGoodsName"); // 단품 주문 시 상품명

        boolean isFromCart = (Boolean) payload.getOrDefault("isFromCart", false); // ★★★ payload에서 isFromCart 받기 ★★★
        
        
        String goodsName = "굿즈 상품";
        int totalQuantity = 0;

        if (clientOrderItems == null || clientOrderItems.isEmpty()) {
            response.put("status", "error");
            response.put("message", "주문할 상품 정보가 없습니다.");
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }
        // 임시 상품명 및 수량 계산 (서버 검증 로직으로 대체 예정)
        for (Map<String, Object> item : clientOrderItems) {
            totalQuantity += (Integer) item.getOrDefault("qty", 1);
        }
        if (clientOrderItems.size() > 1) {
            goodsName = ((String) clientOrderItems.get(0).get("goodsNm")) + " 외 " + (clientOrderItems.size() - 1) + "건";
        } else if (singleGoodsName != null && !singleGoodsName.isEmpty()) {
            goodsName = singleGoodsName;
        } else {
            goodsName = (String) clientOrderItems.get(0).get("goodsNm");
        }
        
        if (totalAmount == null || totalAmount <= 0 || totalQuantity <= 0) {
            response.put("status", "error");
            response.put("message", "결제 금액 또는 수량이 유효하지 않습니다.");
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // --- 3. 카카오페이 결제 준비 요청 및 주문/결제 정보 저장 ---
        try {
            OrdersVO order = new OrdersVO();

            order.setMemUsername(username);
            order.setOrderTotalPrice(totalAmount);
            // 수정 부분 1: 주문 초기 상태를 OSC009 (결제 요청)으로 설정
            order.setOrderStatCode("OSC009"); 

            order.setOrderRecipientNm((String) payload.get("orderRecipientNm"));
            order.setOrderRecipientPhone((String) payload.get("orderRecipientPhone"));
            order.setOrderZipCode((String) payload.get("orderZipCode"));
            order.setOrderAddress1((String) payload.get("orderAddress1"));
            order.setOrderAddress2((String) payload.get("orderAddress2"));
            order.setOrderEmail((String) payload.get("orderEmail"));
            order.setOrderMemo((String) payload.get("orderMemo"));

            order.setOrderTypeCode((String) payload.getOrDefault("orderTypeCode", "UNKNOWN"));
            order.setOrderPayMethodNm("카카오페이"); 
            
            // ★★★ 여기 추가: orderFromCart 필드 설정 ★★★
            order.setOrderFromCart(isFromCart ? "Y" : "N"); // ★★★ isFromCart 값 OrdersVO에 설정 ★★★
            log.info("### OrderVO에 설정된 orderFromCart 값: {}", order.getOrderFromCart()); // ★★★ 이 로그도 추가해주세요! ★★★

            List<OrderDetailVO> orderDetails = new ArrayList<>();
            for (Map<String, Object> itemMap : clientOrderItems) {
                OrderDetailVO detail = new OrderDetailVO();
                detail.setGoodsNo((Integer) itemMap.get("goodsNo"));
                detail.setGoodsOptNo((Integer) itemMap.get("goodsOptNo"));
                detail.setOrderDetQty((Integer) itemMap.get("qty"));
                orderDetails.add(detail);
                
                order.setOrderTypeCode("GOODS");
                order.setOrderPayMethodNm("카카오페이");
            }

            orderService.createOrder(order, orderDetails); 
            createdOrderNo = order.getOrderNo();
            log.info("kakaoPayReady - createOrder 호출 후, 생성된 orderNo: {}", createdOrderNo); // 이 값이 고유한지 확인

            Map<String, String> kakaoReadyResult = kakaoPayService.kakaoPayReady(
                    goodsName,
                    totalAmount,
                    totalQuantity,
                    username,
                    String.valueOf(createdOrderNo)
            );

            if (kakaoReadyResult != null && kakaoReadyResult.containsKey("next_redirect_pc_url")) {
                String tid = kakaoReadyResult.get("tid");
                String nextRedirectPcUrl = kakaoReadyResult.get("next_redirect_pc_url");

                PaymentVO payment = new PaymentVO();
                payment.setTid(tid);
                payment.setOrderNo(createdOrderNo);
                payment.setCid(kakaoPayService.getCid());
                payment.setTotalAmount(totalAmount);
                // 수정 부분 2: 결제 초기 상태를 PSC004 (결제 요청)으로 설정
                payment.setPaymentStatCode("PSC004"); 

                orderService.savePaymentReadyInfo(payment);

                response.put("status", "success");
                response.put("message", "카카오페이 결제 준비가 완료되었습니다.");
                response.put("next_redirect_pc_url", nextRedirectPcUrl);
                return new ResponseEntity<>(response, HttpStatus.OK);

            } else {
                log.error("카카오페이 결제 준비 응답에 필수 정보 누락: {}", kakaoReadyResult);
                orderService.updateOrderStatus(createdOrderNo, "OSC002"); // ORDERS.ORDER_STAT_CODE: PAYMENT_FAILED
                response.put("status", "error");
                response.put("message", "카카오페이 결제 준비 중 오류가 발생했습니다.");
                return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
            }
        } catch (Exception e) {
            log.error("카카오페이 결제 준비 중 서버 오류 발생: {}", e.getMessage(), e);
            if (createdOrderNo > 0) {
                try {
                    orderService.updateOrderStatus(createdOrderNo, "OSC002"); // ORDERS.ORDER_STAT_CODE: PAYMENT_FAILED
                } catch (Exception rollbackE) {
                    log.error("주문 {} 상태 업데이트 중 롤백 오류 발생: {}", createdOrderNo, rollbackE.getMessage());
                }
            }
            response.put("status", "error");
            response.put("message", "결제 시스템 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    
}