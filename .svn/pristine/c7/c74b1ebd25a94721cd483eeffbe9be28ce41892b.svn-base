package kr.or.ddit.ddtown.controller.admin.member;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.admin.member.IMemberAdminService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.member.MemCodeListVO;
import kr.or.ddit.vo.member.MemberAdminVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/admin/community/member")
public class AdminMemberController {

	@Autowired
	private IMemberAdminService memberAdminService;
	
	@GetMapping("/main")
	public String memberList(
			@RequestParam(defaultValue = "1", required = true) int currentPage,
			@RequestParam(required = false) String searchType,
			@RequestParam(required = false) String searchWord,
			Model model){
		
		log.info("목록 요청 중...");
		PaginationInfoVO<MemberAdminVO> pagingVO = new PaginationInfoVO<>();
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSearchType(searchType);
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
		}
		
		log.info("pagingVO : {}",pagingVO);
		int totalRecord = memberAdminService.getTotalRecord(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		List<MemberAdminVO> dataList = memberAdminService.getDataList(pagingVO);
		pagingVO.setDataList(dataList);
		
		log.info("최종 pagingVO : " + pagingVO);
		
		Map<String, Object> map = new HashMap<>(); 
		
		int totalMemCnt = 0;
		int generalMemCnt = 0;
		int outMemCnt = 0;
		int blackMemCnt = 0;
		int currentMemCnt = 0;
		
		if(pagingVO.getTotalRecord() > 0) {
			totalMemCnt = pagingVO.getDataList().get(0).getTotalMemCnt();
			generalMemCnt = pagingVO.getDataList().get(0).getGeneralMemCnt();
			outMemCnt = pagingVO.getDataList().get(0).getOutMemCnt();
			blackMemCnt = pagingVO.getDataList().get(0).getBlackMemCnt();
			currentMemCnt = pagingVO.getDataList().get(0).getCurrentMemCnt();
		}
		
		map.put("totalMemCnt", totalMemCnt);
		map.put("generalMemCnt", generalMemCnt);
		map.put("outMemCnt",outMemCnt);
		map.put("blackMemCnt",blackMemCnt);
		map.put("currentMemCnt",currentMemCnt);
		
		ObjectMapper objectMapper = new ObjectMapper();
		
		String cntMap = null;
		
		try {
			cntMap = objectMapper.writeValueAsString(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("cntMap", cntMap);
		
		return "admin/member/main";
	}
	
	@GetMapping("/detail/{memUsername}")
	public String detailMember(@PathVariable String memUsername, Model model) {
		
		log.info("회원 상세페이지 요청 중...");
		
		MemberAdminVO memberVO = memberAdminService.getMember(memUsername);
		
		List<MemCodeListVO> codeList = memberAdminService.getCodeList();
		
		model.addAttribute("memberVO", memberVO);
		model.addAttribute("codeList", codeList);
		
		log.info("memberVO : " + memberVO);
		
		return "admin/member/detail";
	}
	
	@PostMapping("/update/{memUsername}")
	public ResponseEntity<ServiceResult> updateMember(@PathVariable String memUsername, MemberAdminVO memberVO) {
		
		ServiceResult result = null;
		
		log.info("회원 업데이트 요청중...");
		
		log.info("memberVO : " + memberVO);
		
		result = memberAdminService.updateMember(memberVO);
		
		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
	}
	
	@PostMapping("/delete/{memUsername}")
	public ResponseEntity<ServiceResult> deleteMemeber(@PathVariable String memUsername){
		
		ServiceResult result = null;
		
		result = memberAdminService.deleteMember(memUsername);
		
		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
	}
}
