package kr.or.ddit.ddtown.controller.community;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.micrometer.common.util.StringUtils;
import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.community.ICommunityMainPageService;
import kr.or.ddit.ddtown.service.follow.IFollowService;
import kr.or.ddit.ddtown.service.member.membership.IMembershipService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.artist.AlbumVO;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.community.CommunityPostVO;
import kr.or.ddit.vo.community.CommunityProfileVO;
import kr.or.ddit.vo.community.CommunityReportVO;
import kr.or.ddit.vo.community.CommunityVO;
import kr.or.ddit.vo.follow.FollowVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.EmployeeVO;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/community")
public class CommunityMainPageControllerTest {

	@Autowired
	private ICommunityMainPageService artistMainPageService;

	@Autowired
	private IFollowService followService;
	
	@Autowired
	private IMembershipService membershipService;

	@Value("${media.server.url}")
	private String mediaServerUrl;


//	@GetMapping("/main")
//	public String CommunityMainPage(ArtistGroupVO groups, Model model, Principal principal) {
//		log.info("CommunityMainPage() 실행");
//
//		// 서비스 호출 - 그룹 리스트
//		List<ArtistGroupVO> groupList = artistMainPageService.getGroupLists();
//
//		log.info("커뮤니티 메인 팔로우 목록 요청");
//
//		// 사용자 정보 조회
//		String username = principal.getName();
//		List<FollowVO> list = followService.getFollowList(username);
//
//		log.info("followList : {}", list);
//
//		model.addAttribute("following", list);
//		model.addAttribute("groups", groupList);
//
//		return "community/communityMainPage";
//	}
//
//	@GetMapping("/gate/{artGroupNo}")
//	public String artistGatePage(Model model, @PathVariable int artGroupNo) {
//		log.info("artistGatePage() 실행");
//
//		ArtistGroupVO artistGroupVO = artistMainPageService.getGroupInfo(artGroupNo);
//		List<AlbumVO> albumList = artistMainPageService.getGroupAlbum(artGroupNo);
//
//		artistGroupVO.setAlbumList(albumList);
//		model.addAttribute("group", artistGroupVO);
//		return "community/communityGate";
//	}

	@GetMapping("/gate/{artGroupNo}/apt/api/test")
	public ResponseEntity<Map<Object, Object>> aptMain(CommunityVO communityVO) {

		Map<Object, Object> map = new HashMap<>();
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    MemberVO memberVO = null;
	    if(principal instanceof CustomUser) {
	        memberVO = ((CustomUser) principal).getMemberVO();
	    }else if(principal instanceof CustomOAuth2User) {
	        memberVO = ((CustomOAuth2User) principal).getMemberVO();
	    }

	    // 접속중인 사용자가 해당 아티스트 커뮤니티에 팔로우 하고 있는 지 여부
	    int artGroupNo = communityVO.getArtGroupNo();
	    String memUsername = "";
	    if(memberVO != null) {
	    	memUsername = memberVO.getMemUsername();
	    }
	    Map<String, Object> currentUser = new HashMap<String, Object>();
	    currentUser.put("artGroupNo", artGroupNo);
	    currentUser.put("memUsername", memUsername);

	    CommunityProfileVO currentUserComu = artistMainPageService.currentUserComufollowing(currentUser);

	    // 해당 커뮤니티에 팔로우가 되어 있지 않다면
	    if(currentUserComu == null) {
	    	map.put("followFlag", "N");
	    	communityVO.setMyComuProfileNo(0);
	    }else {
	    	map.put("followFlag", "Y");
	    	map.put("userProfile", currentUserComu);
	    	communityVO.setMyComuProfileNo(currentUserComu.getComuProfileNo());
	    }

		PaginationInfoVO<CommunityVO> pagingVO = new PaginationInfoVO<>();
		int page = communityVO.getPage();

		if(StringUtils.isNotBlank(communityVO.getSearchWord())) {
			pagingVO.setSearchWord(communityVO.getSearchWord());
		}
		if(StringUtils.isNotBlank(communityVO.getSearchType())) {
			pagingVO.setSearchType(communityVO.getSearchType());
		}

		pagingVO.setCurrentPage(page);
		communityVO.setStartRow(pagingVO.getStartRow());
		communityVO.setEndRow(pagingVO.getEndRow());

		List<CommunityPostVO> postVO = null;
		int totalRecord = 0;
		String currentPost = "";

		if(communityVO.isArtistTabYn()) {
			communityVO.setBoardTypeCode("ARTIST_BOARD");
			postVO = artistMainPageService.getPostList(communityVO);
			totalRecord = artistMainPageService.getPostTotal(communityVO);
			map.put("artistPostVO", postVO);
			map.put("fanPostVO", new CommunityVO());
			currentPost = "artist";
			log.info("현재 탭 : " + currentPost);
			log.info("게시물 정보 : " + postVO);
		}else {
			communityVO.setBoardTypeCode("FAN_BOARD");
			postVO = artistMainPageService.getPostList(communityVO);
			totalRecord = artistMainPageService.getPostTotal(communityVO);
			map.put("fanPostVO", postVO);
			map.put("artistPostVO", new CommunityVO());
			currentPost = "fan";
			log.info("현재 탭 : " + currentPost);
			log.info("게시물 정보 : " + postVO);
		}

		if(postVO != null && totalRecord > 0) {
			pagingVO.setTotalRecord(totalRecord);
		}else {
			pagingVO.setTotalRecord(0);
		}
		
		ArtistGroupVO artistGroupVO = artistMainPageService.getCommunityInfo(communityVO.getArtGroupNo());

		map.put("pagingVO", pagingVO);
		
		map.put("tab", communityVO.isArtistTabYn());
		
		map.put("artistGroupVO", artistGroupVO);
		
		return new ResponseEntity<Map<Object,Object>>(map, HttpStatus.OK);
	}


//	@PostMapping("/insert/post")
//	public ResponseEntity<ServiceResult> postInsert(CommunityPostVO postVO){
//
//		ServiceResult result = null;
//
//		// 접속중인 사용자 정보 가져오기
//		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//	    MemberVO memberVO = null;
//	    if(principal instanceof CustomUser) {
//	        memberVO = ((CustomUser) principal).getMemberVO();
//	    }else if(principal instanceof CustomOAuth2User) {
//	        memberVO = ((CustomOAuth2User) principal).getMemberVO();
//	    }
//
//	    String memUsername = memberVO.getMemUsername();
//	    postVO.setMemUsername(memUsername);
//
//		log.info("insertPostVO : " + postVO);
//
//		result = artistMainPageService.postInsert(postVO);
//
//
//		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
//	}
//
//	@GetMapping("/post/get/{comuPostNo}")
//	public ResponseEntity<CommunityPostVO> getPost(CommunityPostVO comuPostVO){
//
//		CommunityPostVO postVO = artistMainPageService.getPost(comuPostVO);
//
//		return new ResponseEntity<CommunityPostVO>(postVO,HttpStatus.OK);
//	}
//
//
//	@PostMapping("/update/post")
//	public ResponseEntity<ServiceResult> postUpdate(CommunityPostVO postVO){
//
//		log.info("업데이트 요청한 postVO : " + postVO);
//
//		if(postVO.getMemUsername() == null) {
//			// 접속중인 사용자 정보 가져오기
//			Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//			MemberVO memberVO = null;
//			if(principal instanceof CustomUser) {
//				memberVO = ((CustomUser) principal).getMemberVO();
//			}else if(principal instanceof CustomOAuth2User) {
//				memberVO = ((CustomOAuth2User) principal).getMemberVO();
//			}
//			
//			String memUsername = memberVO.getMemUsername();
//			postVO.setMemUsername(memUsername);
//		}
//
//		ServiceResult result = artistMainPageService.postUpdate(postVO);
//
//		return new ResponseEntity<ServiceResult>(result,HttpStatus.OK);
//	}
//
//	@GetMapping("{artGroupNo}/profile/{comuProfileNo}")
//	public String aptProfileDetail(
//			  @PathVariable int artGroupNo
//			, @PathVariable int comuProfileNo
//			, @RequestParam(required = false) Integer targetPostNo		// 게시글번호 
//			, Model model
//			) {
//		String username = SecurityContextHolder.getContext().getAuthentication().getName();
//		CommunityProfileVO myProfileVO = new CommunityProfileVO();
//		myProfileVO.setMemUsername(username);
//		myProfileVO.setArtGroupNo(artGroupNo);
//		int myComuProfileNo = artistMainPageService.getMyComuProfileNo(myProfileVO);
//
//		CommunityProfileVO profileVO = new CommunityProfileVO();
//		profileVO.setArtGroupNo(artGroupNo);
//		profileVO.setComuProfileNo(comuProfileNo);
//		profileVO.setMyComuProfileNo(myComuProfileNo);
//		profileVO = artistMainPageService.selectProfile(profileVO);
//
//		Map<Object, Object> codeListMap = artistMainPageService.getCodeDetail();
//		ObjectMapper objectMapper = new ObjectMapper();
//		String codeMap = null;
//		try {
//			codeMap = objectMapper.writeValueAsString(codeListMap);
//		} catch (JsonProcessingException e) {
//			e.printStackTrace();
//		}
//
//
//		model.addAttribute("myComuProfileNo",myComuProfileNo);
//		model.addAttribute("profileVO", profileVO);
//		model.addAttribute("artGroupNo", artGroupNo);
//		model.addAttribute("mediaServerUrl", mediaServerUrl);
//		
//		if(targetPostNo != null) {
//			model.addAttribute("targetPostNo", targetPostNo);
//		}
//		
//		model.addAttribute("codeMap", codeMap);
//		return "community/apt/profileDetail";
//	}
//
//	@PostMapping("/delete/post/{postNum}")
//	public ResponseEntity<ServiceResult> postDelete(CommunityPostVO comuPostVO){
//
//		// 접속중인 사용자 정보 가져오기
//		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//	    MemberVO memberVO = null;
//	    if(principal instanceof CustomUser) {
//	        memberVO = ((CustomUser) principal).getMemberVO();
//	    }else if(principal instanceof CustomOAuth2User) {
//	        memberVO = ((CustomOAuth2User) principal).getMemberVO();
//	    }
//
//	    // 접속중인 사용자가 해당 아티스트 커뮤니티에 팔로우 하고 있는 지 여부
//	    int artGroupNo = comuPostVO.getArtGroupNo();
//	    String memUsername = "";
//
//	    if(memberVO != null) {
//	    	memUsername = memberVO.getMemUsername();
//	    }
//
//	    Map<String, Object> currentUser = new HashMap<String, Object>();
//	    currentUser.put("artGroupNo", artGroupNo);
//	    currentUser.put("memUsername", memUsername);
//
//	    CommunityProfileVO currentUserComu = artistMainPageService.currentUserComufollowing(currentUser);
//
//	    comuPostVO.setComuProfileNo(currentUserComu.getComuProfileNo());
//
//		ServiceResult result = artistMainPageService.postDelete(comuPostVO);
//
//		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
//	}
//
//	@GetMapping("/post/detail/{comuPostNo}")
//	public ResponseEntity<CommunityPostVO> getPostDetail(CommunityPostVO comuPostVO){
//
//		log.info("게시판 상세 요청 : " + comuPostVO);
//
//		// 접속중인 사용자 정보 가져오기
//		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//	    MemberVO memberVO = null;
//	    if(principal instanceof CustomUser) {
//	        memberVO = ((CustomUser) principal).getMemberVO();
//	    }else if(principal instanceof CustomOAuth2User) {
//	        memberVO = ((CustomOAuth2User) principal).getMemberVO();
//	    }
//
//	    // 접속중인 사용자가 해당 아티스트 커뮤니티에 팔로우 하고 있는 지 여부
//	    int artGroupNo = comuPostVO.getArtGroupNo();
//	    String memUsername = "";
//
//	    if(memberVO != null) {
//	    	memUsername = memberVO.getMemUsername();
//	    }
//
//	    Map<String, Object> currentUser = new HashMap<String, Object>();
//	    currentUser.put("artGroupNo", artGroupNo);
//	    currentUser.put("memUsername", memUsername);
//
//	    CommunityProfileVO currentUserComu = artistMainPageService.currentUserComufollowing(currentUser);
//
//	    comuPostVO.setComuProfileNo(currentUserComu.getComuProfileNo());
//
//		CommunityPostVO postVO = artistMainPageService.getPost(comuPostVO);
//
//		return new ResponseEntity<CommunityPostVO>(postVO,HttpStatus.OK);
//	}
//
//	@GetMapping("/worldcup")
//	public String favoritWorldcup() {
//		return "community/worldcup";
//	}
}
