<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
<%@ taglib uri="jakarta.tags.core" prefix="c"%>
<%@ taglib uri="jakarta.tags.fmt" prefix="fmt" %>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${artistComuNicknm} - Í≥µÏãù Ìå¨ÌÅ¥ÎüΩ Î∞©</title>
    <meta name="_csrf" content="${_csrf.token }">
    <meta name="_csrf_header" content="${_csrf.headerName }">
    <style>
        body { font-family: sans-serif; margin: 20px; display: flex; flex-direction: column; height: 90vh; }
        #chatDisplay {
            border: 1px solid #ccc;
            height: 70%;
            overflow-y: auto;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
        }
        #messageInput {
            width: calc(100% - 160px);
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box; 
        }
        #attachFileBtn {
        	width: 70px;
            padding: 8px;
            border: none;
            background-color: #6c757d;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 5px;
        }
        #attachFileBtn:hover {
            background-color: #5a6268;
        }
        #sendMessageBtn {
            width: 70px;
            padding: 8px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 5px;
        }
        #sendMessageBtn:hover {
            background-color: #0056b3;
        }
        .chat-message {
        margin-bottom: 5px;
        border-radius: 3px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
	    }
	    .my-message {
	        text-align: right;
	        align-items: flex-end;
	    }
	    .other-message {
	        text-align: left;
	        align-items: flex-start;
	    }
	    .chat-sender {
	        font-weight: bold;
	        margin-bottom: 2px;
	        display: block;
	        font-size: 0.9em;
	        color: #333;
	    }
	    .chat-content-wrapper {
	        display: flex;
	        align-items: flex-end;
	        gap: 8px;
	    }
	    .my-message .chat-content-wrapper {
	        flex-direction: row-reverse;
	    }
	    .other-message .chat-content-wrapper {
	        flex-direction: row;
	    }
	    .chat-content {
	        white-space: pre-wrap;
	        word-break: break-all;
	        padding: 8px 12px;
	        border-radius: 15px;
	        max-width: 70%;
	        box-shadow: 0 1px 1px rgba(0,0,0,0.1);
	        line-height: 1.4;
	    }
	    .my-message .chat-content {
	        background-color: #dcf8c6;
	        color: #333;
	    }
	    .other-message .chat-content {
	        background-color: #ffffff;
	        color: #333;
	    }
	    .chat-time {
	        font-size: 0.75em;
	        color: #888;
	        white-space: nowrap;
	        align-self: flex-end;
	    }
	    .chat-date-header {
	        text-align: center;
	        margin: 15px 0;
	        color: #666;
	        font-size: 0.85em;
	        font-weight: bold;
	        padding: 5px 10px;
	        background-color: #e0e0e0;
	        border-radius: 10px;
	        align-self: center;
	        max-width: fit-content;
	        margin-left: auto;
	        margin-right: auto;
	    }
	    .chat-sender-info {
	    	display: flex;
	    	align-items: center;
	    	margin-bottom: 5px;
	    	gap: 8px;
	    }
	    .chat-profile-img {
	    	width: 30px;
	    	height: 30px;
	    	border-radius: 50%;
	    	object-fit: cover;
	    	border: 1px solid #eee;
	    	flex-shrink: 0;
	    }
	    .chat-profile-initial {
	    	width: 30px;
	    	height: 30px;
	    	border-radius: 50%;
	    	background-color: #007bff;
	    	color: white;
	    	display: flex;
	    	justify-content: center;
	    	align-items: center;
	    	font-weight: bold;
	    	font-size: 0.9em;
	    	border: 1px solid #0056b3;
	    	flex-shrink: 0;
	    }
	    .my-message .chat-sender-info {
	    	flex-direction: row;
	    }
	    .other-message .chat-sender-info {
	    	flex-direction: row-reverse;
	    }
	    .chat-image {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            margin-top: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            cursor: pointer;
        }
        .chat-content.image-only {
        	padding: 0;
        	background-color: transparent;
        	box-shadow: none;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.6.1/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
</head>
<body>
    <h1>${artistComuNicknm} - Í≥µÏãù Ìå¨ÌÅ¥ÎüΩ Î∞©</h1>
    <div>ÌòÑÏû¨ Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê : ${myComuNicknm }</div>
    <div>ÏïÑÌã∞Ïä§Ìä∏ : ${artistComuNicknm }</div>
    
    <div id="chatDisplay"></div>
    <div>
	    <input type="text" id="messageInput" placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.">
	    <input type="file" id="fileInput" style="display: none;" accept="image/*, application/pdf">
	    <button id="attachFileBtn">üìé</button>
	    <button id="sendMessageBtn">Ï†ÑÏÜ°</button>
    </div>
    <script>
    	
        document.addEventListener('DOMContentLoaded', function() {
        	
        	// CSRF ÌÜ†ÌÅ∞ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        	const csrfToken = document.querySelector('meta[name="_csrf"]').getAttribute('content');
        	const csrfHeader = document.querySelector('meta[name="_csrf_header"]').getAttribute('content');
        	
        	// ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            const chatChannelNo = ${chatChannelNo};
            const username = "<sec:authentication property='name'/>";
            const artistComuNicknm = "${artistComuNicknm}";
			const myComuNicknm = "${myComuNicknm}";
            
			// ÏöîÏÜå Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            const chatDisplay = document.getElementById('chatDisplay');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendMessageBtn');
            
            // ÌååÏùº Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            const fileInput = document.getElementById('fileInput');
            const attachFileBtn = document.getElementById('attachFileBtn');
            
            // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
            localStorage.setItem('wschat.username', username);
            localStorage.setItem('wschat.chatChannelNo', chatChannelNo);
            localStorage.setItem('wschat.nickname', myComuNicknm);

            // STOMP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î≥ÄÏàò
            let stompClient = null;
            
         	// ÏµúÍ∑º Î©îÏÑ∏ÏßÄ ÎÇ†Ïßú Ï∂îÏ†ÅÌïòÍ∏∞ ÏúÑÌïú Î≥ÄÏàò
            let lastDisplayedDate = null;
            
         	// Î©îÏãúÏßÄÎ•º Ï±ÑÌåÖÏ∞ΩÏóê ÌëúÏãúÌïòÎäî Ìï®Ïàò
           function displayMessage(message) {
         		// 1. Î©îÏÑ∏ÏßÄ
               const messageElement = document.createElement('div');
               messageElement.classList.add('chat-message');
               
               // 2. ÏàòÏã†Ïûê Ï†ïÎ≥¥
               const senderInfoContainer = document.createElement('div');
               senderInfoContainer.classList.add('chat-sender-info');
               
               // 3. ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
               let profileDisplayElement;
               
               if(message.userProfileImgPath && message.userProfileImgPath !== 'null' && message.userProfileImgPath.trim() !== '') {
            	   profileDisplayElement = document.createElement('img');
            	   profileDisplayElement.classList.add('chat-profile-img');
            	   profileDisplayElement.src = message.userProfileImgPath;
            	   profileDisplayElement.alt = message.comuNicknm + " ÌîÑÎ°úÌïÑ";
               } else {
            	   // ÎîîÌè¥Ìä∏ Ïù¥ÎØ∏ÏßÄ
            	   profileDisplayElement = document.createElement('div');
            	   profileDisplayElement.classList.add('chat-profile-initial');
            	   const initial = (message.comuNicknm && message.comuNicknm.length > 0) ? 
            			   message.comuNicknm.charAt(0).toUpperCase() : '?';
            	   profileDisplayElement.textContent = initial;
               }
               
               // 4. ÎãâÎÑ§ÏûÑ
               const senderElement = document.createElement('span');
               senderElement.classList.add('chat-sender');
               senderElement.textContent = message.comuNicknm || message.username || '';
               
               // 5. Ìó§Îçî ÎÇ†Ïßú ÌëúÏãú
               if(lastDisplayedDate !== message.chatSendDateFormattedDate) {
            	   const dateHeaderElement = document.createElement('div');
            	   dateHeaderElement.classList.add('chat-date-header');
            	   dateHeaderElement.textContent = message.chatSendDateFormattedDate;
            	   chatDisplay.appendChild(dateHeaderElement);
            	   lastDisplayedDate = message.chatSendDateFormattedDate;
               }

               if (message.username === username) {
                   messageElement.classList.add('my-message');
                   senderElement.textContent = myComuNicknm;
                   senderInfoContainer.appendChild(senderElement);
                   senderInfoContainer.appendChild(profileDisplayElement);
               } else {
                   messageElement.classList.add('other-message');
                   senderElement.textContent = message.comuNicknm;
                   senderInfoContainer.appendChild(senderElement);
                   senderInfoContainer.appendChild(profileDisplayElement);
               }
               
               const contentWrapper = document.createElement('div');
               contentWrapper.classList.add('chat-content-wrapper');
               
               const contentElement = document.createElement('span');
               contentElement.classList.add('chat-content');
               
               // 6. ÌååÏùº
               if(message.type === 'CTC002' && message.attachDetailNo) {
            	   const fileUrl = message.fileUrl;
            	   
            	   if(fileUrl) {
            		   const imgElement = document.createElement('img');
	            	   imgElement.classList.add('chat-image');
	            	   imgElement.src = fileUrl;
	            	   imgElement.alt = message.chatContent || 'Ïù¥ÎØ∏ÏßÄ';
	            	   imgElement.onclick = () => window.open(fileUrl, '_blank');
	            	   contentElement.appendChild(imgElement);
	            	   contentElement.classList.add('image-only');
            	   } else {	// fileUrl ÏóÜÎäî Í≤ΩÏö∞
            		   contentElement.textContent = "Ïù¥ÎØ∏ÏßÄ Î∂àÎü¨Ïò§Îäî Ï§ë...";
            	   }
               } else {
            	   contentElement.textContent = message.chatContent;
               }
               
               // 7. Ï±ÑÌåÖ ÏãúÍ∞Ñ
               const timeElement = document.createElement('span');
               timeElement.classList.add('chat-time');
               timeElement.textContent = message.chatSendDateFormattedTime;
               
               contentWrapper.appendChild(contentElement);
               contentWrapper.appendChild(timeElement);

               messageElement.appendChild(senderInfoContainer);
               messageElement.appendChild(contentWrapper);
               chatDisplay.appendChild(messageElement);
               
               // Ïä§ÌÅ¨Î°§ÏùÑ Ìï≠ÏÉÅ ÏïÑÎûòÎ°ú ÎÇ¥Î¶º
               chatDisplay.scrollTop = chatDisplay.scrollHeight;
           }
            
            // Ï¥àÍ∏∞ Î©îÏÑ∏ÏßÄ Î°úÎìú
            const rawInitialMessages = [
            	<c:forEach var="message" items="${initialMessages}" varStatus="loop">
            		{
            			username: "<c:out value='${message.username}'/>",
            			comuNicknm: "<c:out value='${message.comuNicknm}' escapeXml='true'/>",
            			chatContent: "<c:out value='${message.chatContent}' escapeXml='true'/>",
            			chatSendDateFormattedDate: "<fmt:formatDate value='${message.chatSendDate}' pattern='yyyyÎÖÑ MÏõî dÏùº EÏöîÏùº'/>",
            			chatSendDateFormattedTime: "<fmt:formatDate value='${message.chatSendDate}' pattern='a h:mm'/>",
            			userProfileImgPath: "<c:out value='${message.userProfileImgPath}'/>",
            			type: "<c:out value='${message.chatMsgTypeCode}'/>",
            			attachDetailNo: "<c:out value='${message.attachDetailNo}'/>",
            			fileUrl: "<c:out value='${message.fileUrl}'/>"
            		}<c:if test='${!loop.last}'>,</c:if>
            	</c:forEach>
            ];
            
            rawInitialMessages.forEach(msg => displayMessage(msg));
            
            // ÏõπÏÜåÏºì Ïó∞Í≤∞ Ìï®Ïàò
            function connect() {
                // /ws-stomp ÏóîÎìúÌè¨Ïù∏Ìä∏Î°ú SockJS Ïó∞Í≤∞
                const socket = new SockJS('/ws-stomp');
                stompClient = Stomp.over(socket);
                
                stompClient.connect({
                	[csrfHeader]: csrfToken
                }, function(frame) {
                	console.log('Connected: ' + frame);
            
                    // Î≥∏Ïù∏Ïùò Î©îÏÑ∏ÏßÄÎ•º Î∞õÏùÑ ÌÅê Íµ¨ÎèÖ
                    stompClient.subscribe(`/user/queue/messages`, function(messageOutput) {
                    	console.log("private message received : ", messageOutput.body);
                    	const message = JSON.parse(messageOutput.body);
                        displayMessage(message);
                    });
                }, function(error) { // Ïó∞Í≤∞ Ïã§Ìå® Ïãú ÏΩúÎ∞±
                    console.error('STOMP Ïó∞Í≤∞ Ïò§Î•ò:', error);
                    appendSystemMessage('Ï±ÑÌåÖÎ∞© Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ® Ìï¥Ï£ºÏÑ∏Ïöî.');
                });
            }
            
            // ÏãúÏä§ÌÖú Î©îÏãúÏßÄ (Ïó∞Í≤∞/ÏûÖÏû•/Ìá¥Ïû• Îì±)
            function appendSystemMessage(systemMessage) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('chat-message');
                messageElement.style.fontStyle = 'italic';
                messageElement.style.color = '#555';
                
                messageElement.textContent = `ÏãúÏä§ÌÖú : \${systemMessage}`;
                chatDisplay.appendChild(messageElement);
                chatDisplay.scrollTop = chatDisplay.scrollHeight;
            }
            
         	// ÌÖçÏä§Ìä∏ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ìï®Ïàò
            function sendMessage() {
                const messageContent = messageInput.value.trim();
                if (messageContent && stompClient) {
                    const chatMessage = {
                        username: username,
                        chatChannelNo: chatChannelNo,
                        chatContent: messageContent,
                        comuNicknm: myComuNicknm,
                        type: 'TALK'
                    };
                    stompClient.send(`/pub/chat/dm/message`, {
                		[csrfHeader]: csrfToken
                	}, JSON.stringify(chatMessage));
                	messageInput.value = '';
                }
            }
                    
            // ÌååÏùº Ï†ÑÏÜ° Ìï®Ïàò
            async function sendFileMessage(file) {
            	if(!file) return;
            	
            	const MAX_FILE_SIZE = 10 * 1024 * 1024;	// 10MB
            	const ALLOWED_TYPES = ['image.jpeg', 'image/png', 'image/gif'];	// ÌóàÏö©Ìï† MIME ÌÉÄÏûÖ
            	
            	if(file.size > MAX_FILE_SIZE) {
            		alert('ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§. 10MB Ïù¥ÌïòÏùò ÌååÏùºÎßå ÏóÖÎ°úÎìú Ìï† Ïàò ÏûàÏäµÎãàÎã§.');
            		fileInput.value = '';
            		return;
            	}
            	
            	if(!ALLOWED_TYPES.includes(file.type)) {
            		alert("ÌóàÏö©ÎêòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. Ïù¥ÎØ∏ÏßÄ(JPG, PNG, GIF)Îßå ÏóÖÎ°úÎìú Ìï† Ïàò ÏûàÏäµÎãàÎã§.");
            		fileInput.value = '';
            		return;
            	}
            	
            	const formData = new FormData();
            	formData.append('file', file);
            	formData.append('chatChannelNo', chatChannelNo);
            	
            	try {
            		const response = await fetch('/chat/dm/uploadImage', {
            			method: 'POST',
            			headers: {
            				[csrfHeader]: csrfToken
            			},
            			body: formData
            		});
            		
            		if(response.ok) {
            			const data = await response.json();
            			console.log("ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ: " , data);
            			
            			// ÌååÏùº URL ÏõπÏÜåÏºì Ï†ÑÏÜ°
            			const chatMessage = {
            				username: username,
            				chatChannelNo: chatChannelNo,
            				comuNicknm: myComuNicknm,
            				type: 'FILE',
            				chatContent: file.name,
            				attachDetailNo: data.attachDetailNo,
            				fileUrl: data.fileUrl
            			};
            			
            			stompClient.send(`/pub/chat/dm/message`, {
                    		[csrfHeader]: csrfToken
                    	}, JSON.stringify(chatMessage));
            			
            			// ÌååÏùº ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
            			fileInput.value = '';
            		} else {
            			const errorText = await response.text();
            			console.error("ÌååÏùº ÏóÖÎ°úÎìú Ïã§Ìå® : ", response.status, errorText);
            			alert("ÌååÏùº ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.");
            		}
            	} catch(e) {
            		console.error("ÌååÏùº ÏóÖÎ°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù : " , e);
            		alert("ÌååÏùº ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
            	}
            }

            // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') {
                    sendMessage();
                }
            });
            
         	// ÌååÏùº Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
            attachFileBtn.addEventListener('click', function() {
            	fileInput.click();
            });
         	
            fileInput.addEventListener('change', function() {
            	if(this.files && this.files.length > 0) {
            		const fileToUpload = this.files.item(0);
            		if(fileToUpload) {
            			sendFileMessage(fileToUpload);
            		}
            	}
            });

            // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏõπÏÜåÏºì Ïó∞Í≤∞
            connect();

        });
    </script>
</body>
</html>