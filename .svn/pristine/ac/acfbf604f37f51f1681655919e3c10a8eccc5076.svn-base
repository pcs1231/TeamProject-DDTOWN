<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="jakarta.tags.core" prefix="c" %>
<%@ taglib uri="jakarta.tags.fmt" prefix="fmt" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DDTOWN 굿즈샵 - 주문하기</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/pages/mainservice_common.css">
    <link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/pages/mainservice_home.css">
    <link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/pages/goods.css">
    <meta name="_csrf" content="${_csrf.token}"/>
	<meta name="_csrf_header" content="${_csrf.headerName}"/>
</head>
<body class="order-page-body">
    <header class="site-header">
        <div class="logo">
            <a href="${pageContext.request.contextPath}/goods/main">DDTOWN SQUARE</a>
        </div>
        <nav class="utility-nav">
            <c:choose>
                <c:when test="${isLoggedIn == true}"> <%-- 컨트롤러에서 isLoggedIn 모델 속성을 전달한다고 가정 --%>
                    <ul id="loggedInNav">
                        <li><a href="#" class="icon-btn" title="알림">🔔</a></li>
                        <li><a href="${pageContext.request.contextPath}/mypage.html" class="icon-btn" title="마이페이지">👤</a></li>
                        <li><a href="#" class="icon-btn" title="고객센터">👩‍💻</a></li>
                        <li><a href="${pageContext.request.contextPath}/logout" id="logoutBtn" class="auth-link">로그아웃</a></li>
                    </ul>
                </c:when>
                <c:otherwise>
                    <ul id="loggedOutNav">
                        <li><a href="${pageContext.request.contextPath}/login.html" class="auth-link">로그인</a></li>
                        <li><a href="${pageContext.request.contextPath}/signup.html" class="signup-link">회원가입</a></li>
                    </ul>
                </c:otherwise>
            </c:choose>
        </nav>
    </header>

    <nav class="main-navigation">
        <ul>
            <li><a href="${pageContext.request.contextPath}/goods/main">굿즈샵</a></li>
            <li>
                <a href="#">선호도 조사</a>
                <ul class="submenu">
                    <li><a href="#">인기 투표</a></li>
                </ul>
            </li>
            <li><a href="#">콘서트</a></li>
        </ul>
    </nav>

    <div class="order-container">
        <div class="order-section">
            <h2>주문 상품</h2>
            <div class="order-items">
                <c:choose>
                    <c:when test="${not empty orderItems}"> <%-- orderItems는 컨트롤러에서 전달받는 주문 상품 리스트 (GoodsCartVO 등) --%>
                        <c:set var="totalProductAmount" value="0"/>
                        <c:forEach var="item" items="${orderItems}">
                            <div class="order-item" 
                                 data-goods-no="${item.goodsNo}" 
                                 data-goods-opt-no="${item.goodsOptNo}" 
                                 data-qty="${item.cartQty}"> <%-- 상품 정보를 data 속성에 저장 --%>
                                <div class="item-image">
                                    <img src="${not empty item.representativeImageUrl ? item.representativeImageUrl : 'https://via.placeholder.com/80x80/E6E6FA/000000?text=No+Image'}" alt="${item.goodsNm}">
                                </div>
                                <div class="item-info">
                                    <div class="item-name">${item.goodsNm}</div>
                                    <div class="item-option">옵션: ${not empty item.goodsOptNm ? item.goodsOptNm : '선택 없음'}</div>
                                </div>
                                <div class="item-quantity">수량: <fmt:formatNumber value="${item.cartQty}" type="number"/></div>
                                <div class="item-price"><fmt:formatNumber value="${item.cartTotalAmount}" type="number"/>원</div>
                            </div>
                            <c:set var="totalProductAmount" value="${totalProductAmount + item.cartTotalAmount}"/>
                        </c:forEach>
                    </c:when>
                    <c:otherwise>
                        <p style="text-align: center; padding: 20px;">주문할 상품이 없습니다. 장바구니에서 상품을 선택해주세요.</p>
                    </c:otherwise>
                </c:choose>
            </div>
        </div>

        <div class="order-section">
            <h2>배송지 정보</h2>
            <form class="delivery-info-form">
                <div class="form-group">
                    <label for="receiverName">받는 사람</label>
                    <input type="text" id="receiverName" name="receiverName" required 
                           value="${not empty memberInfo ? memberInfo.memNicknm : ''}"> <%-- 회원 닉네임 기본값 --%>
                </div>
                <div class="form-group">
                    <label for="receiverPhone">연락처</label>
                    <input type="tel" id="receiverPhone" name="receiverPhone"> <%-- 회원 전화번호 기본값 --%>
                </div>
                <div class="form-group full-width">
                    <label for="postcode">우편번호</label>
                    <div style="display: flex; gap: 10px;">
                        <input type="text" id="postcode" name="postcode" readonly style="flex-grow: 1;"
                               value="${not empty memberInfo ? memberInfo.memZipCode : ''}"> <%-- 회원 우편번호 기본값 --%>
                        <button type="button" class="address-search-btn" onclick="searchAddress()">주소 검색</button>
                    </div>
                </div>
                <div class="form-group full-width">
                    <label for="address">기본주소</label>
                    <input type="text" id="address" name="address" readonly
                           value="${not empty memberInfo ? memberInfo.memAddress1 : ''}"> <%-- 회원 기본주소 기본값 --%>
                </div>
                <div class="form-group full-width">
                    <label for="addressDetail">상세주소</label>
                    <input type="text" id="addressDetail" name="addressDetail"
                           value="${not empty memberInfo ? memberInfo.memAddress2 : ''}"> <%-- 회원 상세주소 기본값 --%>
                </div>
                <div class="form-group">
                    <label for="deliveryRequest">배송 요청사항</label>
                    <select id="deliveryRequest" name="deliveryRequest" onchange="toggleCustomMessage()">
                        <option value="">배송 요청사항 선택</option>
                        <option value="door">문 앞에 놓아주세요</option>
                        <option value="security">경비실에 맡겨주세요</option>
                        <option value="call">배송 전 연락주세요</option>
                        <option value="custom">직접 입력</option>
                    </select>
                </div>
                <div class="form-group full-width" id="customMessageArea" style="display: none;">
                    <label for="customMessage">배송 메시지 직접 입력</label>
                    <textarea id="customMessage" name="customMessage" rows="3" maxlength="50" placeholder="최대 50자까지 입력 가능합니다"></textarea>
                </div>
            </form>
        </div>

        <div class="order-section">
            <h2>결제 수단</h2>
            <div class="payment-methods">
                <div class="payment-method selected" data-method="kakao"> <%-- 기본 카카오페이 선택 --%>
                    <img src="https://via.placeholder.com/40x40/E6E6FA/000000?text=K" alt="카카오페이">
                    <div class="method-name">카카오페이</div>
                </div>
                </div>
        </div>

        <div class="order-summary">
            <div class="summary-row">
                <span class="label">총 상품 금액</span>
                <span class="value" id="totalProductAmountDisplay"><fmt:formatNumber value="${totalProductAmount}" type="number"/>원</span>
            </div>
            <div class="summary-row">
                <span class="label">배송비</span>
                <span class="value" id="shippingFeeDisplay">
                    <c:set var="shippingFee" value="${totalProductAmount >= 30000 ? 0 : (totalProductAmount > 0 ? 3000 : 0)}"/> <%-- 3만원 이상 무료 --%>
                    <fmt:formatNumber value="${shippingFee}" type="number"/>원
                </span>
            </div>
            <div class="summary-row total">
                <span class="label">최종 결제 금액</span>
                <span class="value" id="finalPaymentAmountDisplay">
                    <fmt:formatNumber value="${totalProductAmount + shippingFee}" type="number"/>원
                </span>
            </div>
            <div class="payment-agreement">
                <label>
                    <input type="checkbox" id="paymentAgreement">
                    주문 상품 정보 및 결제 진행에 동의합니다. (필수)
                </label>
            </div>
        </div>

        <div class="order-actions">
            <button class="btn-order-cancel" onclick="location.href='${pageContext.request.contextPath}/goods/cart/list'">취소</button> <%-- 장바구니 페이지로 이동 --%>
            <button class="btn-order-submit" id="submitOrderBtn">결제하기</button>
        </div>
    </div>

    <div id="footer-placeholder"></div>

    <script>
        let csrfToken;
        let csrfHeader;
        
        document.addEventListener('DOMContentLoaded', function() {
            // CSRF 토큰 초기화
            const csrfMeta = document.querySelector('meta[name="_csrf"]');
            const csrfHeaderMeta = document.querySelector('meta[name="_csrf_header"]');
            if (csrfMeta && csrfHeaderMeta) {
                csrfToken = csrfMeta.content;
                csrfHeader = csrfHeaderMeta.headerName; // CSRF 헤더 이름도 필요할 수 있음
            } else {
                console.error("CSRF meta tags not found.");
            }

            // 로그인 상태 관리 (컨트롤러에서 isLoggedIn 모델 속성을 받아와 사용)
            const isLoggedIn = ${isLoggedIn}; 

            const loggedOutNav = document.getElementById('loggedOutNav');
            const loggedInNav = document.getElementById('loggedInNav');
            if (isLoggedIn) {
                if(loggedOutNav) loggedOutNav.style.display = 'none';
                if(loggedInNav) loggedInNav.style.display = 'flex';
            } else {
                if(loggedOutNav) loggedOutNav.style.display = 'flex';
                if(loggedInNav) loggedInNav.style.display = 'none';
            }

            const logoutBtn = document.getElementById('logoutBtn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', function(event) {
                    event.preventDefault(); // 기본 링크 이동 방지
                    alert("로그아웃되었습니다."); 
                    // 실제 로그아웃은 서버 측 URL로 이동하여 처리 (예: form submit 또는 window.location.href)
                    window.location.href = '${pageContext.request.contextPath}/logout'; // 실제 로그아웃 URL
                });
            }

            // 외부 푸터 파일 로드
            fetch('${pageContext.request.contextPath}/resources/html/footer.html')
                .then(response => response.ok ? response.text() : Promise.reject('Footer not found'))
                .then(data => {
                    const footerPlaceholder = document.getElementById('footer-placeholder');
                    if (footerPlaceholder) {
                        footerPlaceholder.innerHTML = data;
                    }
                })
                .catch(error => console.error('Error loading footer:', error));

            // 배송 메시지 직접 입력 토글
            function toggleCustomMessage() {
                const deliveryRequest = document.getElementById('deliveryRequest');
                const customMessageArea = document.getElementById('customMessageArea');
                customMessageArea.style.display = deliveryRequest.value === 'custom' ? 'block' : 'none';
            }
            // 페이지 로드 시 초기 상태 설정
            toggleCustomMessage(); // 초기 로드 시 한 번 실행

            // 결제 수단 선택
            const paymentMethods = document.querySelectorAll('.payment-method');
            paymentMethods.forEach(method => {
                method.addEventListener('click', function() {
                    paymentMethods.forEach(m => m.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // 주소 검색 함수 (Daum 우편번호 서비스 등 API 연동 필요)
            function searchAddress() {
                // 이 부분은 실제 Daum 우편번호 서비스 API 연동 코드가 들어갈 것입니다.
                // 현재는 alert만 표시
                alert('주소 검색 기능이 준비 중입니다. Daum 우편번호 서비스를 연동해야 합니다.');
                // 예시: new daum.Postcode({ oncomplete: function(data) { ... } }).open();
            }
            // 전역 함수로 등록하여 HTML onclick에서 호출 가능하게 함
            window.searchAddress = searchAddress;

            // 폼 유효성 검사
            function validateForm() {
                const receiverName = document.getElementById('receiverName').value;
                const receiverPhone = document.getElementById('receiverPhone').value;
                const postcode = document.getElementById('postcode').value;
                const address = document.getElementById('address').value;
                const addressDetail = document.getElementById('addressDetail').value;
                const deliveryRequest = document.getElementById('deliveryRequest');
                const customMessage = document.getElementById('customMessage');
                const paymentAgreement = document.getElementById('paymentAgreement');
                const selectedPayment = document.querySelector('.payment-method.selected');

                if (!receiverName.trim()) {
                    alert('받는 사람 이름을 입력해주세요.');
                    return false;
                }
                if (!receiverPhone.trim()) {
                    alert('연락처를 입력해주세요.');
                    return false;
                }
                if (!postcode || !address) {
                    alert('주소를 입력해주세요.');
                    return false;
                }
                if (!addressDetail.trim()) {
                    alert('상세주소를 입력해주세요.');
                    return false;
                }
                if (deliveryRequest.value === 'custom' && !customMessage.value.trim()) {
                    alert('배송 메시지를 입력해주세요.');
                    return false;
                }
                if (!selectedPayment) {
                    alert('결제 수단을 선택해주세요.');
                    return false;
                }
                if (!paymentAgreement.checked) {
                    alert('주문 상품 정보 및 결제 진행 동의가 필요합니다.');
                    return false;
                }
                return true;
            }

            // 주문 제출 (결제하기 버튼)
            const submitOrderBtn = document.getElementById('submitOrderBtn');
            if (submitOrderBtn) {
                submitOrderBtn.addEventListener('click', function() {
                    if (!isLoggedIn) { // 로그인 여부 재확인
                        alert('로그인이 필요한 기능입니다.');
                        window.location.href = '${pageContext.request.contextPath}/login.html';
                        return;
                    }

                    if (validateForm()) {
                        const selectedPayment = document.querySelector('.payment-method.selected');
                        if (selectedPayment.dataset.method === 'kakao') {
                            // 카카오페이 결제 처리 시작
                            // 주문 상품 정보를 수집
                            const orderItemsElements = document.querySelectorAll('.order-item');
                            const orderItems = [];
                            let totalItemQty = 0; // 카카오페이에 보낼 총 상품 수량

                            orderItemsElements.forEach(itemEl => {
                                const goodsNo = parseInt(itemEl.dataset.goodsNo);
                                const goodsOptNo = parseInt(itemEl.dataset.goodsOptNo); // HTML에 data-goods-opt-no가 없다면 NaN
                                const qty = parseInt(itemEl.dataset.qty);

                                if (!isNaN(goodsNo) && !isNaN(qty)) { // 유효한 숫자만 포함
                                    const itemData = {
                                        goodsNo: goodsNo,
                                        qty: qty
                                    };
                                    if (!isNaN(goodsOptNo)) { // 옵션 번호가 유효할 경우에만 추가
                                        itemData.goodsOptNo = goodsOptNo;
                                    } else {
                                        itemData.goodsOptNo = 0; // 옵션이 없는 상품에 대한 기본 옵션 번호 (0)
                                    }
                                    orderItems.push(itemData);
                                    totalItemQty += qty;
                                }
                            });

                            // 배송지 정보 수집
                            const receiverName = document.getElementById('receiverName').value;
                            const receiverPhone = document.getElementById('receiverPhone').value;
                            const postcode = document.getElementById('postcode').value;
                            const address1 = document.getElementById('address').value;
                            const address2 = document.getElementById('addressDetail').value;
                            const deliveryRequestSelect = document.getElementById('deliveryRequest');
                            let orderMemo = deliveryRequestSelect.value;
                            if (orderMemo === 'custom') { // 직접 입력 시
                                orderMemo = document.getElementById('customMessage').value;
                            } else if (orderMemo === '') { // 선택 안 함
                                orderMemo = null;
                            }
                            const orderEmail = '${not empty memberInfo ? memberInfo.memMail : ''}'; // 회원 이메일 사용

                            // 최종 결제 금액 (화면에서 파싱)
                            const finalAmountDisplay = document.getElementById('finalPaymentAmountDisplay').textContent;
                            const finalAmount = parseInt(finalAmountDisplay.replace(/[^0-9]/g, '')); // 숫자만 추출

                            // 카카오페이 결제 준비 요청 Payload 구성
                            const payReadyPayload = {
                                orderItems: orderItems, // 주문 상품 리스트
                                totalAmount: finalAmount, // 총 결제 금액
                                totalQuantity: totalItemQty, // 총 수량

                                // OrdersVO에 필요한 나머지 정보 (컨트롤러에서 받도록)
                                orderRecipientNm: receiverName,
                                orderRecipientPhone: receiverPhone,
                                orderZipCode: postcode,
                                orderAddress1: address1,
                                orderAddress2: address2,
                                orderEmail: orderEmail, // JSP에서 회원 이메일 가져옴
                                orderMemo: orderMemo,
                                // 단일 상품일 경우의 상품명 (카카오페이 결제창 요약용)
                                singleGoodsName: orderItems.length === 1 ? document.querySelector('.order-item .item-name').textContent : undefined
                            };

                            // 카카오페이 결제 준비 API 호출
                            fetch('${pageContext.request.contextPath}/goods/order/pay/ready', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    [csrfHeader]: csrfToken
                                },
                                body: JSON.stringify(payReadyPayload)
                            })
                            .then(response => {
                                if (!response.ok) {
                                    return response.json().then(errorData => {
                                        throw new Error(errorData.message || `서버 오류 발생 (HTTP ${response.status})`);
                                    });
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.status === 'success') {
                                    // 카카오페이 결제 페이지로 리다이렉트
                                    window.location.href = data.next_redirect_pc_url;
                                } else {
                                    alert('결제 준비 실패: ' + data.message);
                                }
                            })
                            .catch(error => {
                                console.error('결제 준비 중 오류:', error);
                                alert('결제 준비 중 오류가 발생했습니다: ' + error.message);
                            });

                        } else {
                            alert('선택된 결제 수단이 카카오페이가 아닙니다. 다른 결제 수단은 준비 중입니다.');
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>