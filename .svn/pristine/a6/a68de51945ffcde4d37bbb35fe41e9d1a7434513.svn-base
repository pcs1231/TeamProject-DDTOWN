package kr.or.ddit.ddtown.service.admin.report;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.admin.report.IReportMapper;
import kr.or.ddit.ddtown.service.file.IFileService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.corporate.audition.AuditionVO;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import kr.or.ddit.vo.report.ReportVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ReportSerivceImpl implements IReportService {
	
	@Autowired
	private IReportMapper reportMapper;
	
	@Autowired
	private IFileService fileService;
	
//	private static final Map<String, String> REASON_CODE_MAPPING = new HashMap<>();
//    static {
//        REASON_CODE_MAPPING.put("RRC001", "BRC001"); // 스팸
//        REASON_CODE_MAPPING.put("RRC002", "BRC002"); // 욕설
//        REASON_CODE_MAPPING.put("RRC003", "BRC003"); // 음란물
//        REASON_CODE_MAPPING.put("RRC004", "BRC004"); // 기타
//        // 필요한 경우 추가 매핑을 여기에 정의합니다.
//    }
	
	//신고 목록페이지
	@Override
	public List<ReportVO> reportList(PaginationInfoVO<ReportVO> pagingVO) {
		return reportMapper.reportList(pagingVO);
	}
	
	//신고상세페이지
	@Override
	public ReportVO reportDetail(int reportNo) {
		//상세 기본정보
		ReportVO reportDetail = reportMapper.reportDetail1(reportNo);
		
		//해당게시글 총 신고 횟수, 신고자ID 목록
		 if (reportDetail != null) {
			 ReportVO paramVO = new ReportVO();
			 paramVO.setReportTargetTypeCode(reportDetail.getReportTargetTypeCode());
			 
			 String targetTypeCode = reportDetail.getReportTargetTypeCode();
	            if ("RTTC001".equals(targetTypeCode)) {
	                paramVO.setTargetComuPostNo(reportDetail.getTargetComuPostNo());
	            } else if ("RTTC002".equals(targetTypeCode)) {
	                paramVO.setTargetComuReplyNo(reportDetail.getTargetComuReplyNo());
	            } else if ("RTTC003".equals(targetTypeCode)) {
	                paramVO.setTargetChatNo(reportDetail.getTargetChatNo());
	            }
	            
	            List<ReportVO> individualReports  = reportMapper.reportDetail2(paramVO);
	            
	            reportDetail.setReportedCount(individualReports.size());
	            
	            reportDetail.setIndividualReportList(individualReports);
	            
				/*
				 * if (reportSummary != null) {
				 * reportDetail.setReporterUsernames(reportSummary.getReporterUsernames());
				 * reportDetail.setReportedCount(reportSummary.getReportedCount()); }
				 */
	            if ("RTTC001".equals(targetTypeCode)) {
	                List<AttachmentFileDetailVO> fileList = reportMapper.reportDetail3(paramVO);
	                try {
						List<AttachmentFileDetailVO> files = fileService.getFileDetailsByGroupNo(fileList.get(0).getFileGroupNo());
						reportDetail.setFileList(files);
					} catch (Exception e) {
						e.printStackTrace();
					}
	            }
		 }
		return reportDetail;
	}
	
	//신고처리
	@Transactional
	@Override
	public ServiceResult reportUpdate(ReportVO reportVO) {
		ServiceResult result = null;
		//1.REPORTS테이블 업데이트(게시물에 대해 동일신고 건수가 있을 시 일괄 처리)
		int report = reportMapper.reportUpdate(reportVO);
		log.info("reportUpdate->report1 : " + report);
		
		if(report > 0) {
			//2.REPORTS_DETAIL 업데이트( 신고날짜를 오늘날짜로 업데이트)
			report += this.reportMapper.reportUpdate2(reportVO);
			log.info("reportUpdate->report2 : " + report);
			
			//2-1. reportTargetTypeCode : RTTC001 이면서 reportResultCode : RRTC002(콘텐츠 삭제) 해당 게시글 삭제여부 활성화
			if(reportVO.getReportTargetTypeCode().equals("RTTC001")&&reportVO.getReportResultCode().equals("RRTC002")) {
				report += this.reportMapper.updatePostDelYn(reportVO.getTargetComuPostNo());
				log.info("reportUpdate->report2-1 : " + report);
			}
			
			//2-2. reportTargetTypeCode : RTTC002 이면서 reportResultCode : RRTC002 => 해당 댓글 삭제여부 활성화
			if(reportVO.getReportTargetTypeCode().equals("RTTC002")&&reportVO.getReportResultCode().equals("RRTC002")) {
				report += this.reportMapper.updateReplyDelYn(reportVO.getTargetComuPostNo());
				log.info("reportUpdate->report2-2 : " + report);
			}
			
			//2-3. reportTargetTypeCode : RTTC003 이면서 reportResultCode : RRTC002 => 해당 채팅메세지 삭제여부 활성화
			if(reportVO.getReportTargetTypeCode().equals("RTTC003")&&reportVO.getReportResultCode().equals("RRTC002")) {
				report += this.reportMapper.deleteChat(reportVO.getTargetComuPostNo());
				log.info("reportUpdate->report2-3 : " + report);
			}
			
			//3. 그 사람에 대한 총 신고건수가 10건 넘어가면 벤여부 활성화
			report += this.reportMapper.reportUpdate3(reportVO);
//			
//			//3-1.신고당한사람이 가장많이 신고 당한 유형 알아내기
//			String manyReportReasonCode = null;	// 가장 많이 신고당한 유형
//			String manyBanReasonCodeBRC = null;	//블랙리스트의 BanReasonCode에 알맞은 코드로 변환하기위한 변수
//			if(reportVO.getTargetMemUsername() !=null) {
//				manyReportReasonCode = reportMapper.selectManyReportReasonCode(reportVO.getTargetMemUsername());
//				
//				if(manyReportReasonCode != null) {
//					manyBanReasonCodeBRC = REASON_CODE_MAPPING.getOrDefault(manyReportReasonCode, "BRC004");
//				}
//			}
//			
//			//4. BLACKLIST 테이블 삽입(총 신고 건수가 10건이상이된 사람이 있으면 블랙리스트 목록에 비활성화로 자동추가 
//			if(reportVO.getReportCnt()>=10) {
//				BlacklistVO blacklistVO = new BlacklistVO();	// 전달할 객체 채우기
//				log.info("블랙리스트 추가 시도 - 대상 회원 ID: {}", reportVO.getTargetMemUsername());
//				
//				blacklistVO.setMemUsername(reportVO.getTargetMemUsername());//신고 당한사람 ID 넣기
//				
//				blacklistVO.setEmpUsername(reportVO.getEmpUsername()); //현재 로그인한 관리자 ID
//				
//				blacklistVO.setBanReasonCode(manyReportReasonCode); //신고가장 많이 당한 사유 넣기
//				
//				report += this.reportMapper.reportUpdate4(blacklistVO);
//				log.info("reportUpdate->report4 : " + report);
//			}
//			
			result = ServiceResult.EXIST;
		}else {
			result = ServiceResult.NOTEXIST;
		}
		return result;
	}
	/*
	 * //신고된 게시글의 총신고 수, 신고자들 조회
	 * 
	 * @Override public Map<String, Object> getTargetReportSummary(String
	 * reportTargetTypeCode, Integer targetNo) { if (targetNo == null ||
	 * reportTargetTypeCode == null) { return null; } Map<String, Object> paramMap =
	 * new HashMap<>(); paramMap.put("reportTargetTypeCode", reportTargetTypeCode);
	 * //신고 유형코드 paramMap.put("targetNo", targetNo); //게시글 or 댓글 or 메세지 번호 return
	 * reportMapper.selectTargetReportSummary(paramMap); }
	 */

	//총 신고 목록 수
	@Override
	public int selectReportCount(PaginationInfoVO<ReportVO> pagingVO) {
		return reportMapper.selectReportCount(pagingVO);
	}
	//신고 미처리 수
	@Override
	public int reportCnt() {
		return reportMapper.reportCnt();
	}
	//신고 사유 유형별 수
	@Override
	public Map<String, Integer> reportReasonCnt() {
		List<Map<String, Object>> reportReasonCnt = reportMapper.reportReasonCnt();
		log.info("매퍼 결과 (reportReasonCnt): {}", reportReasonCnt);
		Map<String, Integer> reasonCnts = new HashMap<>();
		
		for (Map<String, Object> entry  : reportReasonCnt) {
			log.info("처리 중인 entry: {}", entry);
            String reasonCode = (String) entry.get("REASONCODE"); // DB에서 넘어온 사유 코드
            Integer count = ((Number) entry.get("COUNT")).intValue();
            reasonCnts.put(reasonCode, count);
            
        }
        return reasonCnts;
	}
		

}
