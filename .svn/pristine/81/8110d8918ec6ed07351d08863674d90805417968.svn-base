package kr.or.ddit.ddtown.service.community;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ddtown.mapper.community.CommunityProfileMapper;
import kr.or.ddit.ddtown.mapper.community.ICommunityFollowMapper;
import kr.or.ddit.vo.community.CommunityProfileVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Service
public class CommunityProfileServiceImpl implements ICommunityProfileService{
	
	@Value("${kr.or.ddit.upload.path}")
	private String uploadPath;
	private final String BASEIMG = "/upload/profile/base/defaultImg.png";
	
	private final CommunityProfileMapper communityProfileMapper;
	
	@Autowired
	private ICommunityFollowMapper followMapper;

	@Override
	public String getComuNicknmByUsername(String currentUser) {
		return communityProfileMapper.getComuNicknmByUsername(currentUser);
	}

	/**
	 * 이미지 업로드 후 프로필 등록
	 */
	@Transactional
	@Override
	public int insertCommuProfile(CommunityProfileVO profileVO) {
		// 이미지 처리
		MultipartFile img = profileVO.getImgFile();
		if(img != null && StringUtils.isNotBlank(img.getOriginalFilename())) {
			try {
				String savePath = uploadImg(img,profileVO.getArtGroupNo());
				profileVO.setComuProfileImg(savePath);
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
				return 0;
			}
		}else {
			// 이미지 선택 안할시 기본 이미지 경로 지정
			profileVO.setComuProfileImg(BASEIMG);
		}
		int status = followMapper.insertFollow(profileVO.getMemUsername(),profileVO.getArtGroupNo());
		if(status > 0) {
			status = communityProfileMapper.insertCommuProfile(profileVO);
		}
		return status;
	}
	
	/**
	 * 커뮤니티프로필 Del Y 처리
	 */
	@Transactional
	@Override
	public int deleteCommuProfile(CommunityProfileVO profileVO) {
		int status = communityProfileMapper.deleteCommuProfile(profileVO);
		if(status > 0) {
			status = followMapper.deleteFollow(profileVO.getMemUsername(),profileVO.getArtGroupNo());
			if(status == 0) {
				throw new RuntimeException("잘못된 데이터로 인해 삭제 안됨");
			}
		}else {
			throw new RuntimeException("잘못된 데이터로 인해 변경 안됨");
		}
		return status;
	}
	
	
	private String uploadImg(MultipartFile img, int artGroupNo) throws IllegalStateException, IOException {
		String savePath = uploadPath + "/community/" + artGroupNo;
		File file = new File(savePath);
		if(!file.exists()) {
			file.mkdirs();
		}
		
		if(StringUtils.isNotBlank(img.getOriginalFilename())) {
			String filename = UUID.randomUUID() + "_" + img.getOriginalFilename();
			savePath += "/" + filename;
			img.transferTo(new File(savePath));
		}
		return savePath.replace("C:", "");
		
	}

	// 커뮤니티 프로필 이미지 경로 조회
	@Override
	public String getComuProfileImgPath(String currentUser, Integer artGroupNo) {
		return communityProfileMapper.selectProfileImgPathByUsername(currentUser, artGroupNo);
	}

}
