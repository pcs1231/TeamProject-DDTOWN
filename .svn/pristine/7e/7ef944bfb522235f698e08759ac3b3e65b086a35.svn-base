package kr.or.ddit.ddtown.controller.order; // 패키지명 변경 고려

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller; // ★★★ @Controller 사용! ★★★
import org.springframework.ui.Model; // Model 객체를 사용하여 JSP로 데이터 전달
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.ddtown.service.goods.cart.ICartService;
import kr.or.ddit.ddtown.service.goods.order.IOrderService;
import kr.or.ddit.ddtown.service.kakaopay.IKakaoPayService;
import kr.or.ddit.dto.kakaopay.KakaoPayApproveResponseDTO;
import kr.or.ddit.vo.order.OrderDetailVO;
import kr.or.ddit.vo.order.OrdersVO;
import kr.or.ddit.vo.order.PaymentVO;
import kr.or.ddit.vo.security.CustomOAuth2User;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;

import lombok.extern.slf4j.Slf4j;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

@Slf4j
@Controller // ★★★ 여기를 @Controller로 변경! ★★★
@RequestMapping("/goods/order") // 기존과 동일한 RequestMapping 사용 가능
public class PaymentResultController { // 클래스 이름도 변경

    @Autowired
    private IKakaoPayService kakaoPayService;

    @Autowired
    private IOrderService orderService;

    @Autowired
    private ICartService cartService;

    /**
     * 카카오페이 결제 성공 후 호출되는 콜백 URL을 처리합니다.
     * (카카오페이에서 GET 요청으로 리다이렉트)
     */
    @GetMapping("/kakaoPaySuccess")
    public String kakaoPaySuccess(
            @RequestParam("pg_token") String pgToken,
            @RequestParam("orderNo") int orderNo,
            @AuthenticationPrincipal Object principal,
            Model model // JSP로 데이터를 전달하기 위해 Model 추가
            ) {
        log.info("kakaoPaySuccess() 호출! pg_token: {}, orderNo: {}", pgToken, orderNo);

        MemberVO authMember = null;
        String username = null;
        if (principal instanceof CustomUser) {
            authMember = ((CustomUser) principal).getMemberVO();
        } else if (principal instanceof CustomOAuth2User) {
            authMember = ((CustomOAuth2User) principal).getMemberVO();
        }

        if (authMember == null || authMember.getMemUsername() == null || authMember.getMemUsername().isEmpty()) {
            return "redirect:/login?error=auth_required";
        }
        username = authMember.getMemUsername();

        OrdersVO order = null;
        PaymentVO paymentReadyInfo = null;
        List<OrderDetailVO> orderDetails = null;

        try {
            order = orderService.getOrderByOrderNo(orderNo);
            paymentReadyInfo = orderService.getPaymentReadyInfoByOrderNo(orderNo);

            if (order == null || paymentReadyInfo == null || paymentReadyInfo.getTid() == null) {
                log.error("유효하지 않은 주문 또는 결제 준비 정보. orderNo: {}", orderNo);
                return "redirect:/goods/paymentFail?reason=invalid_order_info";
            }

            if (!username.equals(order.getMemUsername())) {
                log.warn("결제 승인 시도 유저 불일치. Current: {}, Order: {}", username, order.getMemUsername());
                return "redirect:/goods/paymentFail?reason=user_mismatch";
            }

            String tid = paymentReadyInfo.getTid();
            String partnerOrderId = String.valueOf(order.getOrderNo());
            String partnerUserId = order.getMemUsername();

            KakaoPayApproveResponseDTO approveResponse = kakaoPayService.kakaoPayApprove(
                    tid,
                    partnerOrderId,
                    partnerUserId,
                    pgToken
            );

            order.setOrderStatCode("OSC001");

            String approvedAtString = approveResponse.getApproved_at();
            if (approvedAtString != null && !approvedAtString.isEmpty()) {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
                    LocalDateTime localDateTime = LocalDateTime.parse(approvedAtString, formatter);

                    order.setOrderPayDt(java.util.Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant()));
                    paymentReadyInfo.setCompletedAt(java.sql.Timestamp.valueOf(localDateTime));

                } catch (DateTimeParseException e) {
                    log.error("approved_at 날짜 파싱 오류: {} - {}", approvedAtString, e.getMessage());
                    throw new RuntimeException("결제 승인 시각 파싱 오류", e);
                }
            }
            orderService.updateOrder(order);

            paymentReadyInfo.setPaymentStatCode("PSC001");

            if (approveResponse.getAmount() != null) {
                paymentReadyInfo.setTotalAmount(approveResponse.getAmount().getTotal());
            } else {
                log.warn("카카오페이 Approve 응답에 Amount 정보가 없습니다. orderNo: {}", orderNo);
                paymentReadyInfo.setTotalAmount(0);
            }

            paymentReadyInfo.setAid(approveResponse.getAid());
            orderService.updatePaymentInfo(paymentReadyInfo);

            orderDetails = orderService.getOrderDetailsByOrderNo(orderNo);

            if (orderDetails == null || orderDetails.isEmpty()) {
                log.error("kakaoPaySuccess() - orderNo {}에 대한 주문 상세 정보를 찾을 수 없어 장바구니 후처리 불가.", orderNo);
                throw new RuntimeException("결제된 상품의 상세 정보 조회에 실패했습니다.");
            }

            boolean isFromCart = "Y".equals(order.getOrderFromCart());
            log.info("kakaoPaySuccess - isFromCart (DB에서 조회): {}", isFromCart);

            cartService.processCartAfterPayment(username, orderDetails, isFromCart);

            // 최종적으로 JSP로 전달할 데이터를 Model에 담습니다.
            model.addAttribute("orderNo", orderNo);
            model.addAttribute("amount", approveResponse.getAmount().getTotal());

            // JSP 파일의 직접 경로를 반환합니다. ViewResolver가 처리합니다.
            return "goods/payment/paymentSuccess"; // ★★★ 리다이렉트 대신 JSP 경로 직접 반환 ★★★

        } catch (Exception e) {
            log.error("카카오페이 결제 승인 중 오류 발생: {}", e.getMessage(), e);
            try {
                orderService.updateOrderStatus(orderNo, "OSC002");

                if (paymentReadyInfo != null) {
                    paymentReadyInfo.setPaymentStatCode("PSC002");
                    orderService.updatePaymentStatus(orderNo, paymentReadyInfo.getPaymentStatCode());
                } else {
                    PaymentVO failedPaymentInfo = orderService.getPaymentReadyInfoByOrderNo(orderNo);
                    if(failedPaymentInfo != null) {
                        failedPaymentInfo.setPaymentStatCode("PSC002");
                        orderService.updatePaymentStatus(orderNo, failedPaymentInfo.getPaymentStatCode());
                    } else {
                        log.warn("결제 실패 시 paymentReadyInfo 조회 실패. orderNo: {}", orderNo);
                    }
                }
            } catch (Exception rollbackE) {
                log.error("결제 실패 후 주문/결제 상태 업데이트 중 롤백 오류 발생: {}", orderNo, rollbackE.getMessage());
            }
            return "redirect:/goods/paymentFail?reason=payment_error";
        }
    }

    // kakaoPayCancel, kakaoPayFail 메서드도 이 클래스로 이동시키고
    // 각 메서드의 return "redirect:/goods/payment/paymentCancel?orderNo=" + orderNo;
    // 와 같이 `redirect:`를 유지하면 됩니다.
    // 또는 만약 해당 페이지도 직접 JSP로 렌더링하고 싶다면, `return "goods/payment/paymentCancel";` 과 같이 변경하고 Model에 데이터 추가
    // 다만 카카오페이 콜백에서는 redirect 처리하는 것이 일반적입니다.
    @GetMapping("/kakaoPayCancel")
    public String kakaoPayCancel(
            @RequestParam("orderNo") int orderNo,
            @AuthenticationPrincipal Object principal
            ) {
        log.info("kakaoPayCancel() 호출! 사용자가 결제를 취소했습니다. orderNo: {}", orderNo);

        try {
            orderService.updateOrderStatus(orderNo, "OSC008");
            orderService.updatePaymentStatus(orderNo, "PSC003");
        } catch (Exception e) {
            log.error("주문 {} 상태 업데이트 중 롤백 오류 발생: {}", orderNo, e.getMessage());
        }
        return "redirect:/goods/payment/paymentCancel?orderNo=" + orderNo;
    }

    @GetMapping("/kakaoPayFail")
    public String kakaoPayFail(
            @RequestParam("orderNo") int orderNo,
            @AuthenticationPrincipal Object principal
            ) {
        log.info("kakaoPayFail() 호출! 결제에 실패했습니다. orderNo: {}", orderNo);

        try {
            orderService.updateOrderStatus(orderNo, "OSC002");
            orderService.updatePaymentStatus(orderNo, "PSC002");
        } catch (Exception e) {
            log.error("주문 {} 상태 업데이트 중 롤백 오류 발생: {}", orderNo, e.getMessage());
        }
        return "redirect:/goods/payment/paymentFail?orderNo=" + orderNo;
    }
}